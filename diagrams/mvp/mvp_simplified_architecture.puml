@startuml COOKie_MVP_Simplified_Architecture

title COOKie MVP Architecture (Simplified for Solo Developer)

skinparam linetype ortho

' Users
actor "Users\n(Web Browser)" as Users
actor "Admin" as Admin

' CDN / Static Assets
cloud "CloudFlare\n(Free Tier)" as CDN {
    [Static Assets\nCache] as StaticCache
}

' Yandex Cloud
cloud "Yandex Cloud" as YandexCloud {

    ' Load Balancer
    node "Application\nLoad Balancer" as ALB {
        [NGINX] as NGINX
    }

    ' Frontend (deployed as static on VM)
    node "Frontend VM\n(1 vCPU, 2GB)" as FrontendVM {
        [Next.js Web App\n(SSR)] as WebApp
        [Admin Panel\n(React SPA)] as AdminPanel
    }

    ' Backend Monolith
    node "Backend VM\n(2 vCPU, 4GB)" as BackendVM {
        package "NestJS Monolith" {
            [Recipe Module] as RecipeModule
            [User Module] as UserModule
            [Auth Module] as AuthModule
            [Admin Module] as AdminModule
            [Analytics Module\n(Basic)] as AnalyticsModule
        }
    }

    ' Managed Databases
    database "Managed PostgreSQL\n(2 vCPU, 4GB, 50GB)" as PostgreSQL {
        database "recipes" as RecipesDB
        database "users" as UsersDB
        database "favorites" as FavoritesDB
        database "ratings" as RatingsDB
    }

    database "Managed Redis\n(1 vCPU, 2GB)" as Redis {
        [Cache\n(Sessions, Recipes)] as Cache
    }

    ' Object Storage
    storage "Object Storage\n(100GB)" as ObjectStorage {
        folder "recipe-images" as RecipeImages
        folder "user-avatars" as UserAvatars
    }

    ' Monitoring (Minimal)
    node "Monitoring\n(External Services)" as Monitoring {
        [Sentry\n(Errors)] as Sentry
        [Google Analytics\n(User Events)] as GA
        [UptimeRobot\n(Health Checks)] as Uptime
    }
}

' External Auth Providers
cloud "OAuth Providers" as OAuth {
    [Yandex ID] as YandexID
    [VK ID] as VKID
    [Google OAuth\n(Optional)] as GoogleOAuth
}

' User Connections
Users --> CDN : HTTPS
CDN --> ALB : Cache Miss
Users --> ALB : HTTPS (API)
Admin --> ALB : HTTPS (Admin Panel)

' Load Balancer Routing
ALB --> FrontendVM : Route /
ALB --> BackendVM : Route /api

' Frontend to Backend
WebApp --> BackendVM : REST API
AdminPanel --> BackendVM : REST API

' Backend Modules (Internal)
RecipeModule -[hidden]-> UserModule
UserModule -[hidden]-> AuthModule
AuthModule -[hidden]-> AdminModule
AdminModule -[hidden]-> AnalyticsModule

' Backend to Databases
BackendVM --> PostgreSQL : Read/Write\n(Prisma ORM)
BackendVM --> Redis : Cache Operations
BackendVM --> ObjectStorage : Upload/Download Images

' Backend to External Services
BackendVM --> OAuth : OAuth 2.0 Flow
BackendVM --> Sentry : Error Tracking
BackendVM --> GA : Send Events (Server-side)
Uptime --> ALB : Health Checks (5min)

' Static Assets
FrontendVM --> ObjectStorage : Fetch Images
CDN --> ObjectStorage : Cache Images

' Deployment Flow (Annotation)
note right of BackendVM
  **Deployment**:
  - GitHub Actions CI/CD
  - Docker containers
  - Auto-deploy on merge to main

  **Scaling** (if needed):
  - Add more VMs behind LB
  - PostgreSQL read replica
  - Redis sentinel
end note

note left of PostgreSQL
  **Backup Strategy**:
  - Daily automated backups
  - 7 days retention
  - Point-in-time recovery

  **Cost**: ~4,000 ₽/month
end note

note bottom of YandexCloud
  **Total Monthly Cost**: ~10,000 ₽
  - Compute (VMs): 2,500 ₽
  - PostgreSQL: 4,000 ₽
  - Redis: 1,500 ₽
  - Object Storage: 300 ₽
  - Load Balancer: 1,000 ₽
  - Backup: 500 ₽
  - Traffic: ~200 ₽
end note

legend right
  **MVP Simplifications**:
  • Monolith instead of microservices
  • Managed DB instead of self-hosted
  • No Kubernetes (simple VMs)
  • No ClickHouse (use GA)
  • No Kafka/RabbitMQ
  • No ELK Stack
  • Minimal monitoring

  **When to Scale**:
  • 5,000+ users
  • Performance issues
  • Team grows
  • Funding secured
endlegend

@enduml
