@startuml sequence_upload_single_image

title COOKie MVP - Admin Single Image Upload Flow\nPOST /api/v1/upload/images

actor "Admin (Web/Mobile)" as Admin
participant "ImageUploadController" as Controller
participant "JWT Service" as JWT
participant "Image Validation Service" as Validation
participant "Image Processing Service" as Processing
participant "Storage Service" as Storage
cloud "Yandex Object Storage" as ObjectStorage
database "PostgreSQL" as DB

== Successful Single Image Upload Flow ==

Admin -> Controller: POST /api/v1/upload/images\nAuthorization: Bearer <jwt>\nContent-Type: multipart/form-data\n{\n  file: [binary image data],\n  category: "recipe"\n}

activate Controller

Controller -> JWT: validate_token(jwt)
activate JWT

alt Invalid or Expired JWT
  JWT --> Controller: token_invalid
  Controller --> Admin: 401 Unauthorized\n{\n  "type": "https://cookie.com/errors/unauthorized",\n  "title": "Unauthorized",\n  "status": 401,\n  "detail": "Invalid or expired JWT token"\n}
  deactivate JWT
  deactivate Controller
end

JWT -> JWT: decode_token()\nExtract: user_id, role, exp
JWT --> Controller: token_valid\n{\n  user_id: "550e8400-...",\n  role: "admin",\n  email: "admin@cookie.com"\n}
deactivate JWT

Controller -> Controller: Check role == "admin"

alt User is NOT Admin
  Controller --> Admin: 403 Forbidden\n{\n  "type": "https://cookie.com/errors/forbidden",\n  "title": "Forbidden",\n  "status": 403,\n  "detail": "Admin role required for image upload"\n}
  deactivate Controller
end

Controller -> Validation: validate_image(file)
activate Validation

Validation -> Validation: Check MIME type via magic bytes\n- JPEG: FF D8 FF\n- PNG: 89 50 4E 47\n- WebP: 52 49 46 46

alt Invalid Image Format
  Validation --> Controller: validation_failed\n{\n  error: "invalid_format",\n  supported: ["image/jpeg", "image/png", "image/webp"]\n}
  Controller --> Admin: 400 Bad Request\n{\n  "type": "https://cookie.com/errors/validation-error",\n  "title": "Invalid Image Format",\n  "status": 400,\n  "detail": "Only JPG, PNG, WebP formats supported"\n}
  deactivate Validation
  deactivate Controller
end

Validation -> Validation: Check file size\nMin: 1KB, Max: 5MB

alt File Too Large
  Validation --> Controller: validation_failed\n{\n  error: "file_too_large",\n  size: 6291456,\n  max_size: 5242880\n}
  Controller --> Admin: 413 Payload Too Large\n{\n  "type": "https://cookie.com/errors/file-too-large",\n  "title": "File Too Large",\n  "status": 413,\n  "detail": "Maximum file size is 5MB"\n}
  deactivate Validation
  deactivate Controller
end

Validation -> Validation: Extract image metadata\n- Dimensions (width, height)\n- MIME type\n- EXIF data

Validation -> Validation: Check dimensions\nMin: 800x600, Max: 4000x4000

alt Invalid Dimensions
  Validation --> Controller: validation_failed\n{\n  error: "invalid_dimensions",\n  dimensions: "500x400",\n  min: "800x600"\n}
  Controller --> Admin: 422 Unprocessable Entity\n{\n  "type": "https://cookie.com/errors/validation-error",\n  "title": "Invalid Image Dimensions",\n  "status": 422,\n  "detail": "Minimum dimensions: 800x600px"\n}
  deactivate Validation
  deactivate Controller
end

Validation --> Controller: validation_success\n{\n  mime_type: "image/jpeg",\n  size: 1024768,\n  width: 1920,\n  height: 1280,\n  original_filename: "pasta-carbonara.jpg"\n}
deactivate Validation

note right: File validation passed.\nReady for processing.

Controller -> Processing: process_image(file, metadata)
activate Processing

Processing -> Processing: Generate UUID for filename\nuuid = "abc12345-def6-7890-abcd-ef1234567890"

Processing -> Processing: Strip EXIF data\n(privacy protection)

Processing -> Processing: Auto-rotate based on\nEXIF orientation tag

Processing -> Processing: Resize to multiple sizes:\n1. Thumbnail: 200x200 (center crop, square)\n2. Medium: 800x600 (preserve aspect ratio)\n3. Large: 1200x900 (preserve aspect ratio)

Processing -> Processing: Convert all variants to WebP\n- Format: WebP lossy\n- Quality: 85%\n- Compression: ~30% smaller than JPEG

Processing --> Controller: processing_complete\n{\n  uuid: "abc12345-def6-7890-abcd-ef1234567890",\n  variants: [\n    {type: "thumbnail", filename: "abc12345-200x200.webp", size: 15360},\n    {type: "medium", filename: "abc12345-800x600.webp", size: 51200},\n    {type: "large", filename: "abc12345-1200x900.webp", size: 102400}\n  ]\n}
deactivate Processing

note right: Image processing complete.\n3 WebP variants generated.

Controller -> Storage: upload_to_cloud(variants)
activate Storage

Storage -> ObjectStorage: PUT /recipes/abc12345-200x200.webp\nContent-Type: image/webp\nCache-Control: max-age=31536000, immutable
activate ObjectStorage

alt Object Storage Unavailable
  ObjectStorage --> Storage: 503 Service Unavailable
  Storage --> Controller: upload_failed\n{\n  error: "object_storage_unavailable",\n  service: "Yandex Object Storage"\n}
  Controller --> Admin: 503 Service Unavailable\n{\n  "type": "https://cookie.com/errors/service-unavailable",\n  "title": "Storage Service Unavailable",\n  "status": 503,\n  "detail": "Image upload temporarily unavailable",\n  "retry_after": 60\n}
  deactivate ObjectStorage
  deactivate Storage
  deactivate Controller
end

ObjectStorage --> Storage: 200 OK (thumbnail uploaded)
deactivate ObjectStorage

Storage -> ObjectStorage: PUT /recipes/abc12345-800x600.webp\nContent-Type: image/webp\nCache-Control: max-age=31536000, immutable
activate ObjectStorage

alt Upload Error (Network/Timeout)
  ObjectStorage --> Storage: Connection timeout
  Storage -> Storage: Retry with exponential backoff\n(1s, 2s, 4s - max 3 attempts)

  alt Max Retries Exceeded
    Storage --> Controller: upload_failed\n{\n      error: "upload_timeout",\n      variant: "medium"\n    }
    Controller --> Admin: 500 Internal Server Error\n{\n  "type": "https://cookie.com/errors/upload-failed",\n  "title": "Upload Failed",\n  "status": 500,\n  "detail": "Failed to upload image after 3 attempts"\n}
    deactivate ObjectStorage
    deactivate Storage
    deactivate Controller
  end
end

ObjectStorage --> Storage: 200 OK (medium uploaded)
deactivate ObjectStorage

Storage -> ObjectStorage: PUT /recipes/abc12345-1200x900.webp\nContent-Type: image/webp\nCache-Control: max-age=31536000, immutable
activate ObjectStorage
ObjectStorage --> Storage: 200 OK (large uploaded)
deactivate ObjectStorage

Storage --> Controller: upload_complete\n{\n  urls: {\n    thumbnail: "https://cdn.cookie.com/recipes/abc12345-200x200.webp",\n    medium: "https://cdn.cookie.com/recipes/abc12345-800x600.webp",\n    large: "https://cdn.cookie.com/recipes/abc12345-1200x900.webp"\n  }\n}
deactivate Storage

note right: All 3 variants uploaded\nto Yandex Object Storage.

Controller -> DB: BEGIN TRANSACTION
activate DB

Controller -> DB: INSERT INTO images\n(id, original_filename, file_size, mime_type,\n width, height, cdn_url_thumbnail, cdn_url_medium,\n cdn_url_large, category, uploaded_by, created_at)\nVALUES\n('abc12345-...', 'pasta-carbonara.jpg', 1024768,\n 'image/jpeg', 1920, 1280,\n 'https://cdn.cookie.com/recipes/abc12345-200x200.webp',\n 'https://cdn.cookie.com/recipes/abc12345-800x600.webp',\n 'https://cdn.cookie.com/recipes/abc12345-1200x900.webp',\n 'recipe', '550e8400-...', NOW())

DB --> Controller: 1 row inserted

Controller -> DB: INSERT INTO audit_log\n(user_id, action, resource_type, resource_id,\n ip_address, user_agent, created_at)\nVALUES\n('550e8400-...', 'image_upload', 'image',\n 'abc12345-...', '203.0.113.42',\n 'Mozilla/5.0...', NOW())

DB --> Controller: 1 row inserted

Controller -> DB: COMMIT TRANSACTION

DB --> Controller: Transaction committed
deactivate DB

note right: Image metadata persisted\nin PostgreSQL.

Controller --> Admin: 201 Created\nLocation: /api/v1/upload/images/abc12345-def6-7890-abcd-ef1234567890\n{\n  "id": "abc12345-def6-7890-abcd-ef1234567890",\n  "original_filename": "pasta-carbonara.jpg",\n  "file_size": 1024768,\n  "mime_type": "image/jpeg",\n  "width": 1920,\n  "height": 1280,\n  "category": "recipe",\n  "urls": {\n    "thumbnail": "https://cdn.cookie.com/recipes/abc12345-200x200.webp",\n    "medium": "https://cdn.cookie.com/recipes/abc12345-800x600.webp",\n    "large": "https://cdn.cookie.com/recipes/abc12345-1200x900.webp"\n  },\n  "uploaded_at": "2025-10-18T12:00:00Z",\n  "uploaded_by": {\n    "id": "550e8400-e29b-41d4-a716-446655440000",\n    "email": "admin@cookie.com"\n  }\n}

deactivate Controller

== Image Processing & Storage Details ==

note over Admin, DB
  **Image Processing Pipeline:**
  1. Strip EXIF data (privacy, reduce size)
  2. Auto-rotate based on EXIF orientation
  3. Generate 3 variants:
     - Thumbnail: 200x200 (center crop, square)
     - Medium: 800x600 (preserve aspect ratio)
     - Large: 1200x900 (preserve aspect ratio)
  4. Convert to WebP format (lossy, quality 85%)
  5. Optimize file size (~30% smaller than JPEG)

  **Yandex Object Storage Configuration:**
  - Bucket: cookie-production
  - Folder structure: /recipes/, /avatars/, /other/
  - Filename pattern: {uuid}-{size}.webp
  - CDN: cdn.cookie.com (HTTPS only)
  - Cache-Control: max-age=31536000 (1 year)
  - Immutable: true (files never change)
  - Compression: Brotli + Gzip

  **Supported Image Formats:**
  - JPEG (.jpg, .jpeg): FF D8 FF magic bytes
  - PNG (.png): 89 50 4E 47 magic bytes
  - WebP (.webp): 52 49 46 46 magic bytes

  **Validation Rules:**
  - File size: 1KB - 5MB
  - Dimensions: 800x600 - 4000x4000 pixels
  - MIME type verified via magic bytes (not extension)
  - No malicious content (future: virus scan)

  **Security Measures:**
  - Admin-only upload (JWT + role check)
  - MIME type verification (prevent upload exploits)
  - Random UUID filenames (prevent path traversal)
  - EXIF data stripped (privacy)
  - Rate limiting: unlimited for admins (MVP)

  **Error Responses (RFC 7807):**
  - 400: Invalid image format
  - 401: Invalid/expired JWT
  - 403: Not admin role
  - 413: File too large (>5MB)
  - 422: Invalid dimensions (<800x600 or >4000x4000)
  - 500: Upload failure (network/processing error)
  - 503: Object Storage unavailable

  **Retry Strategy:**
  - Max 3 upload attempts per variant
  - Exponential backoff: 1s, 2s, 4s
  - Circuit breaker pattern (future)
  - Cleanup temp files on error

  **Database Schema (images table):**
  - id: UUID (primary key)
  - original_filename: varchar(255)
  - file_size: integer (bytes)
  - mime_type: varchar(50)
  - width, height: integer (pixels)
  - cdn_url_thumbnail: text
  - cdn_url_medium: text
  - cdn_url_large: text
  - category: enum (recipe, avatar, other)
  - uploaded_by: UUID (foreign key to users)
  - created_at: timestamp
  - updated_at: timestamp

  **Related Diagrams:**
  - api_upload_endpoints.puml (API specs)
  - sequence_upload_batch_images.puml (batch upload)
  - error-handling/error_flow_object_storage_failure.puml
end note

@enduml
