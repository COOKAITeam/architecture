@startuml sequence_upload_batch_images

title COOKie MVP - Admin Batch Image Upload Flow\nPOST /api/v1/upload/images/batch

actor "Admin (Web/Mobile)" as Admin
participant "BatchUploadController" as Controller
participant "JWT Service" as JWT
participant "Image Validation Service" as Validation
participant "Background Job Queue" as JobQueue
participant "Image Processing Service\n(Parallel Workers)" as Processing
participant "Storage Service" as Storage
cloud "Yandex Object Storage\ncdn.cookie.com" as ObjectStorage
database "PostgreSQL\nimages + upload_jobs" as DB

== Batch Image Upload Flow (Multiple Files) ==

Admin -> Controller: POST /api/v1/upload/images/batch\nAuthorization: Bearer <jwt>\nContent-Type: multipart/form-data\n{\n  files: [image1.jpg, image2.png, image3.jpg, ...],\n  category: "recipe"\n}

activate Controller

Controller -> JWT: validate_token(jwt)
activate JWT

alt Invalid or Expired JWT
  JWT --> Controller: token_invalid
  Controller --> Admin: 401 Unauthorized\n{\n  "type": "https://cookie.com/errors/unauthorized",\n  "title": "Unauthorized",\n  "status": 401,\n  "detail": "Invalid or expired JWT token"\n}
  deactivate JWT
  deactivate Controller
end

JWT -> JWT: decode_token()\nExtract: user_id, role, exp
JWT --> Controller: token_valid\n{\n  user_id: "550e8400-...",\n  role: "admin",\n  email: "admin@cookie.com"\n}
deactivate JWT

Controller -> Controller: Check role == "admin"

alt User is NOT Admin
  Controller --> Admin: 403 Forbidden\n{\n  "type": "https://cookie.com/errors/forbidden",\n  "title": "Forbidden",\n  "status": 403,\n  "detail": "Admin role required for batch upload"\n}
  deactivate Controller
end

Controller -> Controller: Count uploaded files\nfiles_count = 12

alt Too Many Files (>10)
  Controller --> Admin: 400 Bad Request\n{\n  "type": "https://cookie.com/errors/validation-error",\n  "title": "Too Many Files",\n  "status": 400,\n  "detail": "Maximum 10 files per batch request",\n  "files_count": 12,\n  "max_files": 10\n}
  deactivate Controller
end

Controller -> Controller: Calculate total size\ntotal_size = 28,311,552 bytes (27 MB)

alt Total Size Exceeded (>25MB)
  Controller --> Admin: 413 Payload Too Large\n{\n  "type": "https://cookie.com/errors/file-too-large",\n  "title": "Batch Size Exceeded",\n  "status": 413,\n  "detail": "Total batch size exceeds 25MB",\n  "total_size": 28311552,\n  "max_size": 26214400\n}
  deactivate Controller
end

note right: Initial validation passed:\n- 10 files or less\n- Total size <= 25MB\n- Admin role verified

Controller -> Validation: validate_all_files([image1, image2, ..., image10])
activate Validation

loop For each file (fail-fast validation)
  Validation -> Validation: validate_file(file)\n- Check MIME type (magic bytes)\n- Check size (1KB - 5MB)\n- Check dimensions (800x600 - 4000x4000)

  alt Any File Invalid
    Validation --> Controller: validation_failed\n{\n  file_index: 3,\n  filename: "invalid.txt",\n  error: "invalid_format",\n  detail: "File 3 is not a valid image"\n}
    Controller --> Admin: 400 Bad Request\n{\n  "type": "https://cookie.com/errors/validation-error",\n  "title": "Invalid File in Batch",\n  "status": 400,\n  "detail": "File 3 (invalid.txt) is not a valid image",\n  "failed_file": {\n    "index": 3,\n    "filename": "invalid.txt",\n    "error": "invalid_format"\n  }\n}
    deactivate Validation
    deactivate Controller
  end
end

Validation --> Controller: all_valid\n{\n  total_files: 10,\n  total_size: 15728640,\n  files_metadata: [\n    {filename: "recipe1.jpg", size: 1572864, dimensions: "1920x1280"},\n    {filename: "recipe2.png", size: 2097152, dimensions: "2048x1536"},\n    ...\n  ]\n}
deactivate Validation

note right: All files validated successfully.\nReady for batch processing.

Controller -> DB: BEGIN TRANSACTION
activate DB

Controller -> DB: INSERT INTO upload_jobs\n(id, user_id, total_files, status, created_at)\nVALUES\n('job-uuid-123', '550e8400-...', 10, 'pending', NOW())

DB --> Controller: job_id = "job-uuid-123"

Controller -> DB: COMMIT TRANSACTION
deactivate DB

note right: Upload job created.\nReturn job ID immediately.

Controller --> Admin: 202 Accepted\nLocation: /api/v1/upload/images/batch/job-uuid-123\n{\n  "job_id": "job-uuid-123",\n  "status": "pending",\n  "total_files": 10,\n  "message": "Batch upload started. Check status at /api/v1/upload/images/batch/job-uuid-123"\n}

deactivate Controller

note over Admin: Admin can poll job status\nwhile processing continues.

== Background Processing (Async) ==

Controller -> JobQueue: enqueue_batch_job(\n  job_id: "job-uuid-123",\n  files: [...],\n  user_id: "550e8400-...",\n  category: "recipe"\n)
activate JobQueue

JobQueue -> Processing: process_batch(job_id, files)
activate Processing

Processing -> DB: UPDATE upload_jobs\nSET status = 'processing', started_at = NOW()\nWHERE id = 'job-uuid-123'
activate DB
deactivate DB

note right: Process images in parallel\n(max 3 concurrent workers)

par Image 1 Processing
  Processing -> Processing: process_image(image1.jpg)
  Processing -> Processing: - Strip EXIF\n- Resize (200x200, 800x600, 1200x900)\n- Convert to WebP (quality 85%)
  Processing -> Storage: upload_variants(image1)
  activate Storage
  Storage -> ObjectStorage: PUT /recipes/uuid1-200x200.webp
  activate ObjectStorage
  ObjectStorage --> Storage: 200 OK
  deactivate ObjectStorage
  Storage -> ObjectStorage: PUT /recipes/uuid1-800x600.webp
  activate ObjectStorage
  ObjectStorage --> Storage: 200 OK
  deactivate ObjectStorage
  Storage -> ObjectStorage: PUT /recipes/uuid1-1200x900.webp
  activate ObjectStorage
  ObjectStorage --> Storage: 200 OK
  deactivate ObjectStorage
  Storage --> Processing: upload_success\n{\n    image_id: "uuid1",\n    urls: {...}\n  }
  deactivate Storage
  Processing -> DB: INSERT INTO images (...)\nVALUES (uuid1, ...)
  activate DB
  deactivate DB

else Image 2 Processing
  Processing -> Processing: process_image(image2.png)
  Processing -> Processing: - Strip EXIF\n- Resize (200x200, 800x600, 1200x900)\n- Convert to WebP (quality 85%)
  Processing -> Storage: upload_variants(image2)
  activate Storage
  Storage -> ObjectStorage: PUT /recipes/uuid2-*.webp
  activate ObjectStorage
  ObjectStorage --> Storage: 200 OK (all variants)
  deactivate ObjectStorage
  Storage --> Processing: upload_success\n{\n    image_id: "uuid2",\n    urls: {...}\n  }
  deactivate Storage
  Processing -> DB: INSERT INTO images (...)\nVALUES (uuid2, ...)
  activate DB
  deactivate DB

else Image 3 Processing
  Processing -> Processing: process_image(image3.jpg)
  Processing -> Processing: - Strip EXIF\n- Resize & convert
  Processing -> Storage: upload_variants(image3)
  activate Storage
  Storage -> ObjectStorage: PUT /recipes/uuid3-*.webp
  activate ObjectStorage
  ObjectStorage --> Storage: 200 OK (all variants)
  deactivate ObjectStorage
  Storage --> Processing: upload_success\n{\n    image_id: "uuid3",\n    urls: {...}\n  }
  deactivate Storage
  Processing -> DB: INSERT INTO images (...)\nVALUES (uuid3, ...)
  activate DB
  deactivate DB
end

note right: Images 1-3 processed in parallel.\nImages 4-10 queued for next batch.

par Continue with remaining images (4-10)
  Processing -> Processing: process_images(4-6)
  Processing -> Storage: upload_variants(images 4-6)
  activate Storage
  Storage -> ObjectStorage: PUT multiple variants
  activate ObjectStorage
  ObjectStorage --> Storage: 200 OK
  deactivate ObjectStorage
  deactivate Storage
  Processing -> DB: INSERT multiple images (4-6)
  activate DB
  deactivate DB

else Process images 7-9
  Processing -> Processing: process_images(7-9)
  Processing -> Storage: upload_variants(images 7-9)
  activate Storage
  Storage -> ObjectStorage: PUT multiple variants
  activate ObjectStorage
  ObjectStorage --> Storage: 200 OK
  deactivate ObjectStorage
  deactivate Storage
  Processing -> DB: INSERT multiple images (7-9)
  activate DB
  deactivate DB

else Process image 10 (with error)
  Processing -> Processing: process_image(image10.jpg)
  Processing -> Storage: upload_variants(image10)
  activate Storage
  Storage -> ObjectStorage: PUT /recipes/uuid10-200x200.webp
  activate ObjectStorage
  ObjectStorage --> Storage: 200 OK
  deactivate ObjectStorage
  Storage -> ObjectStorage: PUT /recipes/uuid10-800x600.webp
  activate ObjectStorage

  alt Upload Failure (Network Error)
    ObjectStorage --> Storage: Connection timeout
    Storage -> Storage: Retry 3 times...\nAll retries failed
    Storage --> Processing: upload_failed\n{\n      image_index: 10,\n      filename: "image10.jpg",\n      error: "upload_timeout"\n    }
    deactivate ObjectStorage
    deactivate Storage

    Processing -> Processing: Mark image 10 as failed\nContinue with success count
    note right: Partial success:\n9 images uploaded, 1 failed
  end
end

Processing -> DB: UPDATE upload_jobs\nSET status = 'completed',\n    completed_at = NOW(),\n    successful_uploads = 9,\n    failed_uploads = 1,\n    error_details = JSON(...)\nWHERE id = 'job-uuid-123'
activate DB
deactivate DB

Processing --> JobQueue: job_complete\n{\n  job_id: "job-uuid-123",\n  status: "completed",\n  successful: 9,\n  failed: 1\n}
deactivate Processing
deactivate JobQueue

note over Admin, DB: Batch processing complete.\n9 successes, 1 failure.

== Admin Polls Job Status ==

Admin -> Controller: GET /api/v1/upload/images/batch/job-uuid-123\nAuthorization: Bearer <jwt>
activate Controller

Controller -> JWT: validate_token(jwt)
activate JWT
JWT --> Controller: token_valid
deactivate JWT

Controller -> DB: SELECT * FROM upload_jobs\nWHERE id = 'job-uuid-123'\nAND user_id = '550e8400-...'
activate DB

alt Job Not Found or Unauthorized
  DB --> Controller: No rows returned
  Controller --> Admin: 404 Not Found\n{\n  "type": "https://cookie.com/errors/not-found",\n  "title": "Job Not Found",\n  "status": 404,\n  "detail": "Upload job not found or unauthorized"\n}
  deactivate DB
  deactivate Controller
end

DB --> Controller: job_record\n{\n  id: "job-uuid-123",\n  status: "completed",\n  total_files: 10,\n  successful_uploads: 9,\n  failed_uploads: 1,\n  started_at: "2025-10-18T12:00:00Z",\n  completed_at: "2025-10-18T12:01:30Z"\n}
deactivate DB

Controller -> DB: SELECT * FROM images\nWHERE upload_job_id = 'job-uuid-123'\nORDER BY created_at ASC
activate DB

DB --> Controller: images_array\n[\n  {id: "uuid1", original_filename: "recipe1.jpg", urls: {...}},\n  {id: "uuid2", original_filename: "recipe2.png", urls: {...}},\n  ...\n  {id: "uuid9", original_filename: "recipe9.jpg", urls: {...}}\n]
deactivate DB

Controller --> Admin: 200 OK\n{\n  "job_id": "job-uuid-123",\n  "status": "completed",\n  "total_files": 10,\n  "successful_uploads": 9,\n  "failed_uploads": 1,\n  "started_at": "2025-10-18T12:00:00Z",\n  "completed_at": "2025-10-18T12:01:30Z",\n  "duration_seconds": 90,\n  "uploaded_images": [\n    {\n      "id": "uuid1",\n      "original_filename": "recipe1.jpg",\n      "file_size": 1572864,\n      "urls": {\n        "thumbnail": "https://cdn.cookie.com/recipes/uuid1-200x200.webp",\n        "medium": "https://cdn.cookie.com/recipes/uuid1-800x600.webp",\n        "large": "https://cdn.cookie.com/recipes/uuid1-1200x900.webp"\n      }\n    },\n    ... (8 more images)\n  ],\n  "failed_images": [\n    {\n      "filename": "image10.jpg",\n      "index": 10,\n      "error": "upload_timeout",\n      "detail": "Failed to upload to object storage after 3 retries"\n    }\n  ]\n}

deactivate Controller

note over Admin: Admin sees partial success:\n9 images available with CDN URLs,\n1 image failed (can retry separately).

== Background Job Queue Failure Scenario ==

Admin -> Controller: POST /api/v1/upload/images/batch\n(same as before)
activate Controller

Controller -> JobQueue: enqueue_batch_job(...)
activate JobQueue

alt Job Queue Unavailable
  JobQueue --> Controller: queue_error\n{\n  error: "queue_unavailable",\n  detail: "Background job service is down"\n}
  deactivate JobQueue

  Controller -> DB: UPDATE upload_jobs\nSET status = 'failed', error = 'queue_unavailable'\nWHERE id = 'job-uuid-123'
  activate DB
  deactivate DB

  Controller --> Admin: 500 Internal Server Error\n{\n  "type": "https://cookie.com/errors/internal-error",\n  "title": "Job Queue Failure",\n  "status": 500,\n  "detail": "Unable to start batch upload. Please try again.",\n  "job_id": "job-uuid-123"\n}
  deactivate Controller
end

== Batch Upload Configuration & Best Practices ==

note over Admin, DB
  **Batch Upload Constraints:**
  - Max files per batch: 10
  - Max total size: 25MB (per batch)
  - Individual file size: 1KB - 5MB
  - Individual file dimensions: 800x600 - 4000x4000 pixels
  - Supported formats: JPG, PNG, WebP

  **Parallel Processing:**
  - Max 3 concurrent workers (configurable)
  - Each worker processes 1 image at a time
  - Queue remaining images for next available worker
  - Prevents resource exhaustion

  **Partial Success Handling:**
  - Process all valid files even if some fail
  - Return success array + errors array
  - Each image processed independently (no rollback)
  - Failed images can be retried individually

  **Job Status Polling:**
  - Admin polls GET /api/v1/upload/images/batch/{job_id}
  - Status values: pending, processing, completed, failed
  - Return progress: successful_uploads, failed_uploads
  - Include uploaded images array + failed images array

  **Background Job Queue:**
  - Use Redis-backed queue (BullMQ, Hangfire, etc.)
  - Job persistence for reliability
  - Retry logic for transient failures
  - Job timeout: 5 minutes (max)
  - Dead letter queue for permanent failures

  **Database Schema (upload_jobs table):**
  - id: UUID (primary key)
  - user_id: UUID (foreign key to users)
  - status: enum (pending, processing, completed, failed)
  - total_files: integer
  - successful_uploads: integer (default 0)
  - failed_uploads: integer (default 0)
  - error_details: jsonb (array of errors)
  - created_at, started_at, completed_at: timestamps

  **Database Schema (images table update):**
  - Add column: upload_job_id (nullable UUID)
  - Links individual images to batch job
  - Allows querying all images from one batch

  **Error Responses (RFC 7807):**
  - 400: Too many files, invalid file in batch
  - 401: Invalid/expired JWT
  - 403: Not admin role
  - 404: Job not found
  - 413: Total batch size exceeded (>25MB)
  - 500: Job queue failure, processing error
  - 503: Object storage unavailable

  **Performance Optimization:**
  - Fail-fast validation (check all files before processing)
  - Parallel processing (3 concurrent workers)
  - Async processing (return job ID immediately)
  - Database transaction per image (isolation)
  - Cleanup temp files after processing

  **Use Cases:**
  - Recipe with multiple step images (e.g., 5 images per recipe)
  - Bulk content import (admin uploads 10 recipes at once)
  - Gallery uploads (future: user photo galleries)

  **Related Diagrams:**
  - api_upload_endpoints.puml (API specs)
  - sequence_upload_single_image.puml (single upload)
  - error-handling/error_flow_object_storage_failure.puml
  - caching/caching_strategy_cdn.puml (CDN configuration)

  **Future Enhancements:**
  - Increase max files to 20
  - WebSocket for real-time progress updates
  - Support for batch deletion
  - Automatic image optimization (AI-based)
  - Duplicate detection (perceptual hashing)
end note

@enduml
