@startuml sequence_auth_password_reset

title COOKie MVP - Password Reset Flow (Two-Step)\nPOST /api/v1/auth/password-reset

actor "User (Browser)" as User
participant "PasswordResetController" as ResetController
participant "Email Service" as Email
database "Redis\nReset Tokens" as Redis
database "PostgreSQL\nusers table" as DB
participant "PasswordResetConfirmController" as ConfirmController
participant "Password Hash Service" as PasswordHash

== Step 1: Request Password Reset ==

User -> ResetController: POST /api/v1/auth/password-reset\nContent-Type: application/json\n{\n  "email": "user@example.com"\n}

activate ResetController

ResetController -> ResetController: Validate email format

alt Invalid Email Format
  ResetController --> User: 422 Unprocessable Entity\n{\n  "type": "https://cookie.com/errors/validation-error",\n  "title": "Validation Failed",\n  "status": 422\n}
  deactivate ResetController
end

ResetController -> DB: SELECT id, email, is_active\nFROM users\nWHERE email = ?
activate DB

alt User Not Found
  DB --> ResetController: No rows returned

  ResetController --> User: 200 OK\n{\n  "message": "If account exists, reset email sent"\n}
  note right: Generic success message\nprevents email enumeration\n(security best practice)
  deactivate DB
  deactivate ResetController
end

alt User Account Inactive
  DB --> ResetController: is_active = false

  ResetController --> User: 200 OK\n{\n  "message": "If account exists, reset email sent"\n}
  note right: Same generic message\nfor inactive accounts
  deactivate DB
  deactivate ResetController
end

DB --> ResetController: User found:\n{\n  "id": "550e8400-...",\n  "email": "user@example.com",\n  "is_active": true\n}
deactivate DB

ResetController -> ResetController: Generate secure reset token\ntoken = random_bytes(32).hex()\nâ†’ "a7f3c2e1d9b8..."

ResetController -> Redis: SETEX reset_token:{token}\n  VALUE: user_id\n  TTL: 3600 (1 hour)
activate Redis

Redis --> ResetController: OK
deactivate Redis

ResetController -> ResetController: Build reset URL:\n{FRONTEND_URL}/reset-password?\n  token={token}

ResetController -> Email: send_password_reset_email(\n  to: "user@example.com",\n  reset_url: {reset_url}\n)
activate Email

Email -> Email: Queue email with:\n- Subject: "Reset Your COOKie Password"\n- Reset link valid for 1 hour\n- Security notice (if you didn't request this...)\n- Support contact

Email --> ResetController: Email queued
deactivate Email

ResetController -> DB: INSERT INTO audit_log\n(user_id, action, ip_address, created_at)\nVALUES (?, 'password_reset_requested', ?, NOW())
note right: Security audit trail

ResetController --> User: 200 OK\n{\n  "message": "If account exists, reset email sent"\n}

note right: Same message for all cases\n(found/not found/inactive)\nPrevents enumeration

deactivate ResetController

== Step 2: Confirm Password Reset ==

User -> User: Click reset link in email\n{FRONTEND_URL}/reset-password?token=...

User -> ConfirmController: POST /api/v1/auth/password-reset/confirm\nContent-Type: application/json\n{\n  "token": "a7f3c2e1d9b8...",\n  "new_password": "NewSecurePass456!"\n}

activate ConfirmController

ConfirmController -> ConfirmController: Validate request:\n- Token format (64 hex chars)\n- Password strength (min 8 chars, etc.)

alt Validation Failed
  ConfirmController --> User: 422 Unprocessable Entity\n{\n  "type": "https://cookie.com/errors/validation-error",\n  "title": "Validation Failed",\n  "status": 422,\n  "invalid_params": [\n    {"field": "password", "reason": "too weak"}\n  ]\n}
  deactivate ConfirmController
end

ConfirmController -> Redis: GET reset_token:{token}
activate Redis

alt Token Not Found or Expired
  Redis --> ConfirmController: nil (not found)

  ConfirmController --> User: 400 Bad Request\n{\n  "type": "https://cookie.com/errors/invalid-token",\n  "title": "Invalid or Expired Token",\n  "status": 400,\n  "detail": "Reset token is invalid or has expired (1 hour TTL)"\n}
  deactivate Redis
  deactivate ConfirmController
end

Redis --> ConfirmController: user_id: "550e8400-..."
deactivate Redis

ConfirmController -> DB: SELECT id, email\nFROM users\nWHERE id = ? AND is_active = true
activate DB

alt User Not Found or Inactive
  DB --> ConfirmController: No rows

  ConfirmController --> User: 400 Bad Request\n{\n  "type": "https://cookie.com/errors/user-not-found",\n  "title": "User Not Found",\n  "status": 400\n}
  deactivate DB
  deactivate ConfirmController
end

DB --> ConfirmController: User exists
deactivate DB

ConfirmController -> PasswordHash: hash_password("NewSecurePass456!")
activate PasswordHash

PasswordHash -> PasswordHash: bcrypt.hash(password, cost=12)

PasswordHash --> ConfirmController: "$2b$12$X7k9..."
deactivate PasswordHash

ConfirmController -> DB: BEGIN TRANSACTION

ConfirmController -> DB: UPDATE users\nSET password_hash = ?,\n    updated_at = NOW()\nWHERE id = ?

ConfirmController -> DB: INSERT INTO audit_log\n(user_id, action, ip_address, created_at)\nVALUES (?, 'password_reset_completed', ?, NOW())

ConfirmController -> DB: COMMIT TRANSACTION

ConfirmController -> Redis: DEL reset_token:{token}
activate Redis
note right: Invalidate token\n(single use only)
Redis --> ConfirmController: 1 (deleted)
deactivate Redis

ConfirmController -> Email: send_password_changed_notification(\n  to: user.email\n)
activate Email
note right: Notify user of\npassword change\n(security alert)
Email --> ConfirmController: Email queued
deactivate Email

ConfirmController --> User: 200 OK\n{\n  "message": "Password reset successful. Please log in with new password."\n}

deactivate ConfirmController

== Security Features ==

note over User, PasswordHash
  **Security Measures:**

  **Email Enumeration Prevention:**
  - Same response for existing/non-existing emails
  - Same response time (constant-time lookup)

  **Token Security:**
  - Cryptographically secure random tokens (32 bytes)
  - Short TTL (1 hour)
  - Single-use tokens (deleted after use)
  - Stored in Redis (fast expiration, no DB cleanup)

  **Rate Limiting:**
  - Max 3 reset requests/hour per email
  - Max 10 confirmation attempts/hour per IP
  - 429 Too Many Requests if exceeded

  **Audit Trail:**
  - All reset requests logged (success/failure)
  - All confirmations logged
  - IP address captured
  - Used for fraud detection

  **Notification:**
  - Email sent after successful password change
  - Alerts user of unauthorized access attempts
end note

== Error Scenarios ==

note over User, PasswordHash
  **Common Errors:**

  **400 Bad Request:**
  - Invalid or expired reset token
  - Token already used
  - Malformed request

  **422 Unprocessable Entity:**
  - Weak password (fails strength check)
  - Invalid email format

  **429 Too Many Requests:**
  - Too many reset requests per email (3/hour)
  - Too many confirmation attempts per IP (10/hour)

  **500 Internal Server Error:**
  - Redis unavailable (token storage failure)
  - Database transaction failure
  - Email service failure (non-blocking)

  **503 Service Unavailable:**
  - Email service overloaded
  - Rate limit exceeded at API Gateway
end note

@enduml
