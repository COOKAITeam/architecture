@startuml Sequence_Meal_Planning_Flow
!theme spacelab

title Sequence Diagram: AI-Assisted Meal Planning (Premium Feature)

actor "Premium User" as User
participant "Mobile App" as App
participant "API Gateway" as Gateway
participant "Auth Service" as Auth
participant "User Service" as UserService
participant "AI Nutritionist\nService" as AIService
participant "Meal Planning\nService" as MealService
participant "Recipe Service" as RecipeService
participant "LLM Provider\n(OpenAI)" as OpenAI
participant "Recipe DB" as DB
participant "Analytics" as Analytics
participant "Notification\nService" as Notification

autonumber

== Инициализация планирования ==
User -> App: Открывает раздел\n"Планировщик питания"
App -> Gateway: GET /api/v1/meal-plans/preferences
Gateway -> Auth: Проверить Premium подписку
Auth -> UserService: GET /api/v1/users/{userId}/subscription
UserService --> Auth: {tier: "premium", valid_until: "2025-12-31"}
Auth --> Gateway: Authorized (Premium)

Gateway -> UserService: Получить профиль и цели
UserService -> DB: SELECT * FROM user_profiles\nWHERE user_id = {userId}
DB --> UserService: {age: 28, weight: 70kg, height: 175cm,\ngoal: "weight_loss", target_calories: 1800,\nallergies: ["gluten", "lactose"],\ndietary_preference: "vegetarian"}
UserService --> Gateway: Профиль пользователя
Gateway --> App: Данные профиля
App --> User: Форма настройки плана:\n- Период (неделя)\n- Приемы пищи (3/день)\n- Бюджет

== Генерация плана питания ==
User -> App: Заполняет параметры:\nПериод: 7 дней\nПриемы: 3 (завтрак, обед, ужин)\nБюджет: средний
App -> Gateway: POST /api/v1/meal-plans/generate\n{period: 7, meals_per_day: 3, budget: "medium"}
Gateway -> Auth: Проверить токен
Auth --> Gateway: OK

Gateway -> MealService: Генерировать план
MealService -> UserService: GET профиль пользователя
UserService --> MealService: Профиль + предпочтения

MealService -> AIService: POST /api/v1/ai/recommendations\n{user_profile, constraints}
AIService -> OpenAI: Chat Completion Request:\n"Generate meal plan for vegetarian,\nweight loss goal, 1800 kcal/day,\nexclude gluten and lactose..."
OpenAI --> AIService: [Структурированный план\nс рекомендациями блюд]

AIService -> RecipeService: GET /api/v1/recipes/batch-search\n{queries: ["овсянка с фруктами",\n"чечевичный суп", "тофу стир-фрай",...],\nfilters: {vegetarian: true,\nexclude_allergens: ["gluten", "lactose"]}}

RecipeService -> DB: SELECT * FROM recipes\nWHERE 'vegetarian' = ANY(dietary_tags)\nAND NOT ('gluten' = ANY(allergens)\nOR 'lactose' = ANY(allergens))\nAND title ILIKE ANY(array['%овсянка%', ...])
DB --> RecipeService: [Подходящие рецепты]
RecipeService --> AIService: [Список рецептов с КБЖУ]

AIService -> AIService: Оптимизировать план:\n- Балансировка КБЖУ по дням\n- Разнообразие блюд\n- Достижение целевых 1800 ккал\n- Учет бюджета

AIService --> MealService: [Оптимизированный план:\n7 дней × 3 приема × рецепты]

MealService -> DB: INSERT INTO meal_plans\n(user_id, start_date, end_date, generated_at)\nVALUES (...) RETURNING id
DB --> MealService: plan_id = 12345

MealService -> DB: INSERT INTO meal_plan_items\n(plan_id, day, meal_type, recipe_id, servings)\nVALUES (...) [21 записей]

MealService -> Analytics: Событие:\n{type: "meal_plan_generated",\nuser_id, plan_id, duration: 7}

MealService --> Gateway: {plan_id: 12345,\nitems: [...], summary: {total_recipes: 21,\navg_calories_per_day: 1795}}
Gateway --> App: JSON Response
App --> User: Показывает план на неделю\nс визуализацией блюд

== Формирование списка покупок ==
User -> App: Нажимает\n"Сформировать список покупок"
App -> Gateway: POST /api/v1/meal-plans/{planId}/shopping-list
Gateway -> MealService: Создать список покупок

MealService -> RecipeService: GET /api/v1/recipes/ingredients\n?recipe_ids=[1,2,3,...,21]
RecipeService -> DB: SELECT ri.recipe_id,\ni.name, ri.quantity, ri.unit,\ni.category, i.avg_price\nFROM recipe_ingredients ri\nJOIN ingredients i ON ri.ingredient_id = i.id\nWHERE ri.recipe_id = ANY(array[1,2,3,...,21])
DB --> RecipeService: [Все ингредиенты с количествами]
RecipeService --> MealService: [Детализированный список]

MealService -> MealService: Агрегировать ингредиенты:\n- Суммировать одинаковые\n- Конвертировать единицы\n- Группировать по категориям\n- Рассчитать примерную стоимость

MealService -> DB: INSERT INTO shopping_lists\n(plan_id, created_at, total_items, estimated_cost)\nVALUES (...) RETURNING id
DB --> MealService: shopping_list_id = 789

MealService --> Gateway: {shopping_list_id: 789,\nitems: [{category: "Овощи",\nname: "Помидоры", quantity: 1.5, unit: "кг"},...],\nestimated_cost: 2850}
Gateway --> App: JSON Response
App --> User: Показывает список покупок:\n- По категориям\n- С количествами\n- Примерная стоимость: 2850₽\n[Кнопка: Заказать через партнера]

== Отправка уведомлений ==
MealService -> Notification: Publish event:\n{type: "meal_plan_ready",\nuser_id, plan_id}
Notification -> Notification: Выбрать канал:\nPush (если включен)
Notification -> User: Push уведомление:\n"Ваш план питания готов!\n21 рецепт на 7 дней"

note right of Analytics
  Метрики для отслеживания:
  - Время генерации плана
  - Конверсия: просмотр → генерация
  - Использование списка покупок
  - Satisfaction rate (опрос после)
end note

@enduml
