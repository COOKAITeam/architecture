@startuml COOKie_Deployment_Diagram
!theme spacelab

title Deployment Diagram: COOKie Platform Infrastructure

skinparam linetype ortho

node "User Devices" {
    [Web Browser] as Browser
    [iOS App] as iOS
    [Android App] as Android
}

cloud "CDN (CloudFlare)" as CDN {
    [Static Assets Cache] as StaticCache
    [Image Cache] as ImageCache
}

cloud "AWS / Yandex Cloud" {

    node "Load Balancer (ALB)" as LB {
        [NGINX / AWS ALB] as NGINX
    }

    node "Kubernetes Cluster" {

        rectangle "Frontend Pods" as FrontendPods {
            node "Web App Pod (x3)" as WebPod {
                [Next.js SSR] as NextJS
            }
            node "Admin Panel Pod (x2)" as AdminPod {
                [React SPA] as ReactAdmin
            }
        }

        rectangle "API Gateway Pods" as APIGatewayPods {
            node "API Gateway Pod (x5)" as GatewayPod {
                [Express Gateway] as ExpressGW
                [Rate Limiter] as RateLimiter
                [Auth Middleware] as AuthMiddleware
            }
        }

        rectangle "MVP Microservices Pods" as MVPPods {
            node "Recipe Service Pod (x5)" as RecipePod {
                [NestJS App] as RecipeApp
            }
            node "Parser Service Pod (x3)" as ParserPod {
                [Python/FastAPI] as ParserApp
                [Celery Workers] as CeleryWorkers
            }
            node "Enrichment Service Pod (x3)" as EnrichmentPod {
                [Python/FastAPI] as EnrichmentApp
            }
            node "Analytics Service Pod (x3)" as AnalyticsPod {
                [Python/FastAPI] as AnalyticsApp
            }
        }

        rectangle "Core Services Pods" as CorePods {
            node "User Service Pod (x3)" as UserPod {
                [NestJS App] as UserApp
            }
            node "Auth Service Pod (x3)" as AuthPod {
                [NestJS App] as AuthApp
            }
            node "Notification Service Pod (x2)" as NotificationPod {
                [Node.js Worker] as NotificationWorker
            }
            node "Payment Service Pod (x2)" as PaymentPod {
                [NestJS App] as PaymentApp
            }
        }

        rectangle "Future Services Pods" as FuturePods #LightGray {
            node "AI Service Pod (x3)" as AIPod {
                [Python/FastAPI] as AIApp
                [ML Models] as MLModels
            }
            node "Meal Planning Pod (x2)" as MealPod {
                [Python/FastAPI] as MealApp
            }
        }
    }

    database "PostgreSQL Cluster" as PostgreSQL {
        database "Recipe DB\n(Primary)" as RecipeDB
        database "Recipe DB\n(Replica)" as RecipeDBReplica
        database "User DB\n(Primary)" as UserDB
        database "User DB\n(Replica)" as UserDBReplica
    }

    database "ClickHouse Cluster" as ClickHouse {
        database "Analytics DB\n(Shard 1)" as AnalyticsDB1
        database "Analytics DB\n(Shard 2)" as AnalyticsDB2
    }

    database "Redis Cluster" as Redis {
        database "Cache Node 1\n(Master)" as Redis1
        database "Cache Node 2\n(Replica)" as Redis2
        database "Cache Node 3\n(Replica)" as Redis3
    }

    node "Message Queue Cluster" as MQCluster {
        [Kafka Broker 1] as Kafka1
        [Kafka Broker 2] as Kafka2
        [Kafka Broker 3] as Kafka3
        [Zookeeper] as Zookeeper
    }

    storage "S3-Compatible Storage" as S3 {
        folder "recipe-images" as RecipeImages
        folder "user-avatars" as UserAvatars
        folder "backups" as Backups
    }

    node "Monitoring & Logging" as Monitoring {
        [Prometheus] as Prometheus
        [Grafana] as Grafana
        [ELK Stack] as ELK
        [Sentry] as Sentry
    }
}

cloud "External Services" {
    [OpenAI API] as OpenAI
    [Payment Gateway\n(Ð®Kassa)] as PaymentGW
    [Email Service\n(SendGrid)] as EmailService
    [SMS Gateway\n(SMSC.ru)] as SMSGateway
    [Push Service\n(FCM)] as FCM
}

' User connections
Browser --> CDN : HTTPS
iOS --> CDN : HTTPS
Android --> CDN : HTTPS

' CDN to Load Balancer
CDN --> LB : Cache Miss
StaticCache --> WebPod : Fetch Static
ImageCache --> S3 : Fetch Images

' Load Balancer routing
LB --> WebPod : Route /
LB --> AdminPod : Route /admin
LB --> GatewayPod : Route /api

' API Gateway to services
GatewayPod --> RecipePod : HTTP/gRPC
GatewayPod --> UserPod : HTTP/gRPC
GatewayPod --> AuthPod : HTTP/gRPC
GatewayPod --> AnalyticsPod : HTTP
GatewayPod --> PaymentPod : HTTP
GatewayPod --> AIPod : HTTP (Premium)
GatewayPod --> MealPod : HTTP (Premium)

' Microservices to databases
RecipePod --> RecipeDB : Read/Write
RecipePod --> RecipeDBReplica : Read
UserPod --> UserDB : Read/Write
UserPod --> UserDBReplica : Read
AuthPod --> UserDB : Read/Write
AnalyticsPod --> AnalyticsDB1 : Write
AnalyticsPod --> AnalyticsDB2 : Write
PaymentPod --> UserDB : Update Subscriptions

' Services to cache
RecipePod --> Redis1 : Cache Operations
UserPod --> Redis1 : Cache Operations
AuthPod --> Redis1 : Session Storage
GatewayPod --> Redis1 : Rate Limiting

' Services to message queue
RecipePod --> Kafka1 : Publish Events
ParserPod --> Kafka1 : Publish Tasks
EnrichmentPod --> Kafka2 : Subscribe
AnalyticsPod --> Kafka2 : Subscribe
NotificationPod --> Kafka3 : Subscribe

' Services to S3
RecipePod --> S3 : Store/Retrieve
UserPod --> S3 : Store Avatars
ParserPod --> S3 : Store Parsed Images

' External integrations
AIPod --> OpenAI : API Calls
PaymentPod --> PaymentGW : Process Payments
NotificationPod --> EmailService : Send Emails
NotificationPod --> SMSGateway : Send SMS
NotificationPod --> FCM : Send Push

' Monitoring connections
RecipePod --> Prometheus : Metrics
UserPod --> Prometheus : Metrics
AuthPod --> Prometheus : Metrics
Prometheus --> Grafana : Visualize
RecipePod --> ELK : Logs
RecipePod --> Sentry : Errors

' Database replication
RecipeDB --> RecipeDBReplica : Replication
UserDB --> UserDBReplica : Replication
Redis1 --> Redis2 : Replication
Redis1 --> Redis3 : Replication
Kafka1 <--> Kafka2 : Sync
Kafka2 <--> Kafka3 : Sync
Kafka1 <--> Zookeeper : Coordination

note right of Kubernetes
  **Auto-scaling policies:**
  - Recipe Service: CPU > 70%
  - Parser Service: Queue depth > 100
  - API Gateway: Request rate > 1000/s

  **Resource limits:**
  - Recipe Service: 2 CPU, 4GB RAM
  - Parser Service: 4 CPU, 8GB RAM
  - AI Service: 8 CPU, 16GB RAM
end note

note bottom of PostgreSQL
  **Backup strategy:**
  - Continuous WAL archiving
  - Daily full backups to S3
  - Point-in-time recovery enabled
  - Retention: 30 days
end note

note bottom of Monitoring
  **SLO Targets:**
  - Uptime: 99.9% (43 min downtime/month)
  - API Latency P95: < 500ms
  - API Latency P99: < 1s
  - Error Rate: < 0.1%
end note

@enduml
