@startuml api_recipe_endpoints

title COOKie MVP - Recipe API\nUML Component Diagram

' Color coding for authentication levels
skinparam component {
  BackgroundColor<<Public>> LightBlue
  BackgroundColor<<Internal>> LightGray
}

skinparam database {
  BackgroundColor LightYellow
}

skinparam cloud {
  BackgroundColor LightCyan
}

' ==================================================
' Recipe Service Components
' ==================================================
package "Recipe API" {

  ' Public endpoints (no auth required)
  component [SearchController] <<Public>>
  component [DetailsController] <<Public>>
  component [PopularController] <<Public>>
  component [CuisinesController] <<Public>>

  ' Internal services
  component [Full-Text Search Service] <<Internal>>
  component [Popularity Service] <<Internal>>
  component [Cache Service] <<Internal>>
}

' External dependencies
database "PostgreSQL\nrecipes table" as DB
database "Redis Cache" as Cache

' ==================================================
' Component Relationships & Dependencies
' ==================================================

' Search flow
[SearchController] --> [Full-Text Search Service] : query
[SearchController] --> [Cache Service] : check cache
[SearchController] --> DB : search recipes
[Full-Text Search Service] --> DB : tsvector search
[Cache Service] --> Cache : get/set

' Details flow
[DetailsController] --> [Cache Service] : check cache
[DetailsController] --> DB : get recipe by slug
[DetailsController] --> DB : increment view_count

' Popular recipes flow
[PopularController] --> [Popularity Service] : calculate
[PopularController] --> [Cache Service] : check cache
[PopularController] --> DB : get top recipes
[Popularity Service] --> DB : weighted query

' Cuisines list flow
[CuisinesController] --> [Cache Service] : check cache
[CuisinesController] --> DB : get distinct cuisines

' ==================================================
' Endpoint Specifications (OpenAPI-relevant)
' ==================================================

note right of [SearchController]
  **Endpoint**: GET /api/v1/recipes
  **Auth**: Public (ðŸ”“)
  **Rate Limit**: 1000 req/hour per IP

  **Query Params**:
  - q (string): Search query
  - cuisine (string[]): Filter by cuisine
  - difficulty (int[]): 1-5
  - max_time (int): Max cooking time (minutes)
  - dietary_tags (string[]): vegan, vegetarian, etc.
  - exclude_allergens (string[]): gluten, nuts, etc.
  - min_rating (decimal): 0-5
  - page, per_page: Pagination
  - sort, order: Sorting

  **Responses**:
  - 200 OK (paginated recipe list)
  - 400 Bad Request (invalid params)
  - 429 Too Many Requests

  **Details**: sequence/recipe/sequence_recipe_search.puml
end note

note right of [DetailsController]
  **Endpoint**: GET /api/v1/recipes/{slug}
  **Auth**: Public (ðŸ”“)
  **Rate Limit**: 1000 req/hour per IP

  **Path Params**: slug (string)

  **Responses**:
  - 200 OK (full recipe object)
  - 404 Not Found

  **Side Effects**:
  - Increments view_count
  - Sends analytics event
  - Updates last_viewed_at

  **Details**: sequence/recipe/sequence_recipe_details.puml
end note

note right of [PopularController]
  **Endpoint**: GET /api/v1/recipes/popular
  **Auth**: Public (ðŸ”“)
  **Rate Limit**: 1000 req/hour per IP

  **Query Params**:
  - limit (int): Default 20, max 50
  - period (string): today, week, month, all_time

  **Responses**:
  - 200 OK (popular recipes list)

  **Algorithm**:
  popularity_score = (view_count * 0.4) +
                     (favorite_count * 0.3) +
                     (rating_avg * rating_count * 0.3)

  **Details**: sequence/recipe/sequence_recipe_popular.puml
end note

note right of [CuisinesController]
  **Endpoint**: GET /api/v1/recipes/cuisines
  **Auth**: Public (ðŸ”“)
  **Rate Limit**: 1000 req/hour per IP

  **Responses**:
  - 200 OK (cuisine list with counts)

  **Details**: sequence/recipe/sequence_recipe_cuisines.puml
end note

note bottom of [Full-Text Search Service]
  **Full-Text Search Implementation**:
  - PostgreSQL tsvector with Russian morphology
  - Searches: title, description fields
  - Relevance ranking: ts_rank
  - Index: idx_recipes_fulltext (GIN)
  - Query time P95: < 100ms

  **Supports**:
  - Synonyms via thesaurus
  - Trigram similarity
  - Multi-field search
end note

note bottom of [Popularity Service]
  **Popularity Calculation**:
  - Background job runs hourly
  - Weighted formula:
    40% view count
    30% favorite count
    30% rating quality
  - Separate rankings per time period
  - Cached for 15 minutes
end note

note bottom of [Cache Service]
  **Caching Strategy**:
  - Search results: 5min TTL
  - Recipe details: 10min TTL
  - Popular recipes: 15min TTL
  - Cuisines list: 1hour TTL

  **Cache Keys**:
  - recipe:search:{hash}
  - recipe:slug:{slug}
  - recipe:popular:{period}
  - recipe:cuisines

  **Invalidation**:
  - On recipe update/delete
  - On rating/favorite change
end note

' ==================================================
' Legend
' ==================================================
legend right
  **Authentication Levels**:
  |<back:LightBlue> Public </back>| No token required |
  |<back:LightGray> Internal </back>| Internal service |

  **OpenAPI Mapping**:
  Controllers â†’ Paths
  Public endpoints â†’ /api/v1/recipes/*

  **Sequence Diagrams**:
  Full request/response flows with schemas
  in diagrams/sequence/recipe/

  **Dependencies**:
  - PostgreSQL: Full-text search, filters
  - Redis: Caching layer

  **Related Diagrams**:
  - database/enhanced_database_schema.puml
  - caching/cache_strategy_overview.puml
  - error-handling/error_codes_mapping.puml
endlegend

@enduml
