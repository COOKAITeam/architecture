@startuml api_auth_endpoints

title COOKie MVP - Authentication API\nUML Component Diagram

' Color coding for authentication levels
skinparam component {
  BackgroundColor<<Public>> LightBlue
  BackgroundColor<<Authenticated>> LightGreen
  BackgroundColor<<Internal>> LightGray
  BackgroundColor<<External>> LightSkyBlue
}

skinparam database {
  BackgroundColor LightYellow
}

' ==================================================
' Authentication Service Components
' ==================================================
package "Authentication API" {

  ' Public endpoints (no auth required)
  component [RegisterController] <<Public>>
  component [LoginController] <<Public>>
  component [OAuthInitController] <<Public>>
  component [OAuthCallbackController] <<Public>>
  component [PasswordResetController] <<Public>>
  component [PasswordResetConfirmController] <<Public>>

  ' Authenticated endpoints (JWT required)
  component [RefreshTokenController] <<Authenticated>>
  component [LogoutController] <<Authenticated>>

  ' Internal services
  component [JWT Service] <<Internal>>
  component [Password Hash Service] <<Internal>>
  component [Email Service] <<Internal>>
}

' External dependencies
cloud "OAuth Providers\nYandex ID, VK ID" as OAuth <<External>>
database "PostgreSQL\nusers table" as DB

' ==================================================
' Component Relationships & Dependencies
' ==================================================

' Registration flow
[RegisterController] --> [Password Hash Service] : hash password
[RegisterController] --> [JWT Service] : generate tokens
[RegisterController] --> DB : create user
[RegisterController] ..> [Email Service] : send verification

' Login flow
[LoginController] --> DB : verify credentials
[LoginController] --> [Password Hash Service] : verify password
[LoginController] --> [JWT Service] : generate tokens
[LoginController] --> DB : update last_login_at

' Token refresh
[RefreshTokenController] --> [JWT Service] : validate & refresh
[RefreshTokenController] --> DB : check token validity

' Logout
[LogoutController] --> [JWT Service] : invalidate token
[LogoutController] --> DB : delete session

' OAuth flow
[OAuthInitController] ..> OAuth : redirect to provider
[OAuthCallbackController] ..> OAuth : exchange code for token
[OAuthCallbackController] --> DB : create/update user
[OAuthCallbackController] --> [JWT Service] : generate tokens

' Password reset flow
[PasswordResetController] --> DB : verify email exists
[PasswordResetController] --> [JWT Service] : generate reset token
[PasswordResetController] ..> [Email Service] : send reset link
[PasswordResetConfirmController] --> [JWT Service] : validate reset token
[PasswordResetConfirmController] --> [Password Hash Service] : hash new password
[PasswordResetConfirmController] --> DB : update password

' ==================================================
' Endpoint Specifications (OpenAPI-relevant)
' ==================================================

note right of [RegisterController]
  **Endpoint**: POST /api/v1/auth/register
  **Auth**: Public (üîì)
  **Rate Limit**: 10 req/hour per IP

  **Responses**:
  - 201 Created (user + tokens)
  - 409 Conflict (email exists)
  - 422 Validation error

  **Side Effects**:
  - Creates user in database
  - Generates JWT access + refresh tokens
  - Sends verification email (async)

  **Details**: sequence/auth/sequence_auth_register.puml
end note

note right of [LoginController]
  **Endpoint**: POST /api/v1/auth/login
  **Auth**: Public (üîì)
  **Rate Limit**: 20 req/hour per IP

  **Responses**:
  - 200 OK (user + tokens)
  - 401 Unauthorized (invalid credentials)
  - 403 Forbidden (account inactive)

  **Security**:
  - Brute-force protection (5 attempts lockout)
  - Bcrypt password verification
  - Audit logging

  **Details**: sequence/auth/sequence_auth_login.puml
end note

note right of [RefreshTokenController]
  **Endpoint**: POST /api/v1/auth/refresh
  **Auth**: Refresh Token (üîê HttpOnly Cookie)
  **Rate Limit**: 100 req/hour per user

  **Responses**:
  - 200 OK (new access token)
  - 401 Unauthorized (invalid/expired token)

  **Token Rotation**:
  - Old token valid for 5min grace period
  - Prevents concurrent request issues

  **Details**: sequence/auth/sequence_auth_token_refresh.puml
end note

note right of [LogoutController]
  **Endpoint**: POST /api/v1/auth/logout
  **Auth**: JWT Required (üîê)
  **Rate Limit**: 5000 req/hour per user

  **Responses**:
  - 204 No Content

  **Options**:
  - logout_all_devices: invalidate all tokens
  - Default: current device only

  **Details**: sequence/auth/sequence_auth_logout.puml
end note

note right of [OAuthInitController]
  **Endpoint**: GET /api/v1/auth/oauth/{provider}
  **Auth**: Public (üîì)
  **Rate Limit**: 50 req/hour per IP

  **Path Params**: provider (yandex | vk)

  **Responses**:
  - 302 Redirect to OAuth provider
  - 400 Bad Request (unsupported provider)

  **Providers**: Yandex ID, VK ID

  **Details**: sequence/auth/sequence_auth_oauth_yandex.puml
end note

note right of [OAuthCallbackController]
  **Endpoint**: GET /api/v1/auth/oauth/callback
  **Auth**: Public (üîì)
  **Rate Limit**: 50 req/hour per IP

  **Query Params**: code, state, error

  **Responses**:
  - 302 Redirect to frontend (success/error)
  - 400 Bad Request (OAuth error)

  **Flow**:
  1. Validate CSRF state token
  2. Exchange code for access token
  3. Fetch user info from provider
  4. Create/login user
  5. Generate JWT tokens

  **Details**: sequence/auth/sequence_auth_oauth_callback.puml
end note

note right of [PasswordResetController]
  **Endpoint**: POST /api/v1/auth/password/reset
  **Auth**: Public (üîì)
  **Rate Limit**: 5 req/hour per email

  **Responses**:
  - 200 OK (always, prevents enumeration)

  **Token Expiry**: 1 hour
  **Single Use**: Token invalidated after use

  **Details**: sequence/auth/sequence_auth_password_reset.puml
end note

note right of [PasswordResetConfirmController]
  **Endpoint**: POST /api/v1/auth/password/reset/confirm
  **Auth**: Reset Token (in body)
  **Rate Limit**: 10 req/hour per IP

  **Responses**:
  - 200 OK (password reset)
  - 401 Unauthorized (invalid/expired token)
  - 422 Validation error

  **Side Effects**:
  - Updates password hash
  - Invalidates all refresh tokens
  - Logs out all devices
  - Sends confirmation email

  **Details**: sequence/auth/sequence_auth_password_reset_confirm.puml
end note

note bottom of [JWT Service]
  **JWT Service Responsibilities**:
  - Generate access tokens (15min expiry)
  - Generate refresh tokens (30 days expiry)
  - Validate token signatures
  - Handle token rotation

  **Token Structure**:
  Access: { sub, email, role, iat, exp }
  Refresh: { sub, type, jti, iat, exp }

  **Algorithm**: HS256 (HMAC-SHA256)
end note

note bottom of [Password Hash Service]
  **Password Hashing**:
  - Algorithm: bcrypt
  - Cost factor: 12
  - Salt: auto-generated per password

  **Verification**:
  - Constant-time comparison
  - Prevents timing attacks
end note

note bottom of OAuth
  **Supported OAuth Providers**:

  **Yandex ID**:
  - Scopes: login:email, login:info
  - User data: email, first_name, last_name, avatar

  **VK ID**:
  - Scopes: email
  - User data: email, first_name, last_name, photo_200

  **Account Linking**:
  - Match by email ‚Üí link to existing user
  - New email ‚Üí create new user
  - Multiple providers per user supported
end note

' ==================================================
' Legend
' ==================================================
legend right
  **Authentication Levels**:
  |<back:LightBlue> Public </back>| No token required |
  |<back:LightGreen> Authenticated </back>| JWT required |
  |<back:LightGray> Internal </back>| Internal service |
  |<back:LightSkyBlue> External </back>| External provider |

  **OpenAPI Mapping**:
  Controllers ‚Üí Paths
  Responses ‚Üí OpenAPI responses
  Auth levels ‚Üí Security schemes

  **Sequence Diagrams**:
  Full request/response flows with schemas
  in diagrams/sequence/auth/
endlegend

@enduml
