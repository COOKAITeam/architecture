@startuml api_admin_endpoints

title COOKie MVP - Admin API\nUML Component Diagram

' Color coding for authentication levels
skinparam component {
  BackgroundColor<<Admin>> LightCoral
  BackgroundColor<<Internal>> LightGray
}

skinparam database {
  BackgroundColor LightYellow
}

skinparam queue {
  BackgroundColor LightSalmon
}

' ==================================================
' Admin Service Components
' ==================================================
package "Admin API" {

  ' Admin endpoints (JWT + Admin role required)
  component [RecipeManagementController] <<Admin>>
  component [PublishController] <<Admin>>
  component [BatchImportController] <<Admin>>
  component [StatsController] <<Admin>>

  ' Internal services
  component [Recipe Validation Service] <<Internal>>
  component [Batch Processing Service] <<Internal>>
  component [Analytics Aggregation Service] <<Internal>>
}

' External dependencies
database "PostgreSQL\nrecipes, ingredients,\nrecipe_ingredients,\nusers, jobs" as DB
database "Redis Cache" as Cache
queue "Background Job Queue" as JobQueue
component [Auth Service] <<Internal>> as AuthService
component [Upload API] <<Internal>> as UploadAPI

' ==================================================
' Component Relationships & Dependencies
' ==================================================

' Recipe management flow
[RecipeManagementController] --> AuthService : validate admin role
[RecipeManagementController] --> [Recipe Validation Service] : validate data
[RecipeManagementController] --> DB : CRUD recipes
[RecipeManagementController] --> Cache : invalidate caches

' Publish flow
[PublishController] --> AuthService : validate admin role
[PublishController] --> [Recipe Validation Service] : pre-publish check
[PublishController] --> DB : update status
[PublishController] --> Cache : invalidate caches

' Batch import flow
[BatchImportController] --> AuthService : validate admin role
[BatchImportController] --> [Batch Processing Service] : process batch
[BatchImportController] --> JobQueue : create job
[Batch Processing Service] --> [Recipe Validation Service] : validate each
[Batch Processing Service] --> DB : import recipes
[Batch Processing Service] --> DB : update job status

' Stats flow
[StatsController] --> AuthService : validate admin role
[StatsController] --> [Analytics Aggregation Service] : aggregate data
[StatsController] --> Cache : check cache
[StatsController] --> DB : query stats
[Analytics Aggregation Service] --> DB : pre-calculated metrics

' Upload integration
[RecipeManagementController] ..> UploadAPI : image URLs

' ==================================================
' Endpoint Specifications (OpenAPI-relevant)
' ==================================================

note right of [RecipeManagementController]
  **Endpoints**:
  - POST /api/v1/admin/recipes
  - PATCH /api/v1/admin/recipes/{id}
  - DELETE /api/v1/admin/recipes/{id}

  **Auth**: Admin Role (👑)
  **Rate Limit**: Unlimited for admins

  **POST Responses**:
  - 201 Created (recipe in draft status)
  - 403 Forbidden (not admin)
  - 409 Conflict (duplicate title)
  - 422 Validation error

  **PATCH Responses**:
  - 200 OK (updated recipe)
  - 404 Not Found

  **DELETE Responses**:
  - 204 No Content
  - 409 Conflict (recipe in use, can't hard delete)

  **Validation**:
  - Min 3 ingredients
  - Min 3 instruction steps
  - Min 1 image
  - Required KBJU data
  - Valid difficulty (1-5)

  **Details**: sequence/admin/sequence_admin_recipe.puml
end note

note right of [PublishController]
  **Endpoint**: POST /api/v1/admin/recipes/{id}/publish

  **Auth**: Admin Role (👑)
  **Rate Limit**: Unlimited

  **Responses**:
  - 200 OK (recipe published)
  - 400 Bad Request (invalid status transition)
  - 422 Unprocessable (incomplete recipe)

  **Pre-Publish Validation**:
  - All required fields filled
  - Min 3 ingredients
  - Min 3 instruction steps
  - Min 1 image
  - KBJU data present
  - Current status: 'review'

  **Status Transitions**:
  draft → review → published
  draft → rejected
  review → draft
  published → draft (unpublish)

  **Side Effects**:
  - Sets moderation_status = 'published'
  - Sets published_at timestamp
  - Sets moderated_by = current admin
  - Recipe visible in public API
  - Invalidates all caches

  **Details**: sequence/admin/sequence_admin_publish.puml
end note

note right of [BatchImportController]
  **Endpoint**: POST /api/v1/admin/recipes/batch

  **Auth**: Admin Role (👑)
  **Rate Limit**: Unlimited
  **Timeout**: 5 minutes

  **Request Body**:
  - format: json | csv
  - recipes: array of recipe objects
  - import_options:
    - skip_duplicates: bool
    - default_status: draft | review
    - validate_before_import: bool
    - dry_run: bool (validate only)

  **Responses**:
  - 202 Accepted (job started)
  - 200 OK (dry_run results)

  **Job Status**: GET /api/v1/admin/jobs/{job_id}
  - status: processing | completed | failed
  - progress: total, processed, imported, skipped, failed
  - results: imported_recipe_ids, errors

  **Batch Processing**:
  - Background job (async)
  - Transaction per recipe
  - Duplicate detection by title
  - Parallel validation
  - Email notification on completion

  **Limits**:
  - CSV: max 100 recipes
  - JSON: max 500 recipes

  **Details**: sequence/admin/sequence_admin_batch_import.puml
end note

note right of [StatsController]
  **Endpoint**: GET /api/v1/admin/stats

  **Auth**: Admin Role (👑)
  **Rate Limit**: Unlimited
  **Cache**: Redis 5min TTL

  **Responses**:
  - 200 OK (dashboard stats)

  **Statistics Included**:
  - Recipes: total, by_status, created_last_7d/30d
  - Users: total, active, new, by_tier
  - Engagement: views, favorites, ratings (7d)
  - Top recipes: by views, favorites, rating
  - System: cache_hit_rate, latency, error_rate

  **Data Sources**:
  - PostgreSQL: recipe/user counts
  - ClickHouse: analytics events
  - Redis: cache metrics
  - Prometheus: system metrics

  **Details**: sequence/admin/sequence_admin_stats.puml
end note

note bottom of [Recipe Validation Service]
  **Validation Rules**:
  - title: required, 5-255 chars, unique
  - difficulty_level: 1-5
  - servings: min 1
  - instructions: min 3 steps
  - ingredients: min 3 items
  - nutrition_per_serving: required (calories, protein, fat, carbs)
  - image_urls: min 1 URL
  - dietary_tags: enum values
  - allergens: enum values
  - timeline_category: enum values
  - price_segment: enum values

  **Slug Generation**:
  - From title (transliterated)
  - Lowercase, hyphens, no special chars
  - Unique (append number if duplicate)
end note

note bottom of [Batch Processing Service]
  **Batch Import Pipeline**:
  1. Validate all recipes first
  2. Check for duplicates (by title)
  3. Import valid recipes in transactions
  4. Skip duplicates if configured
  5. Set status to draft or review
  6. Return summary of results

  **Performance**:
  - Parallel validation (up to 10 concurrent)
  - Sequential import (transaction safety)
  - Progress tracking in jobs table
  - Rollback on error (per recipe)

  **Error Handling**:
  - Continue on single failure
  - Collect all errors
  - Return detailed error list
end note

note bottom of [Analytics Aggregation Service]
  **Metrics Aggregation**:
  - Pre-calculated hourly (background job)
  - Cached for 5 minutes
  - Optimized queries with indexes
  - Separate tables for time-series data

  **Performance**:
  - Dashboard loads < 200ms
  - No expensive joins
  - Materialized views (future)
end note

note left of [RecipeManagementController]
  **Recipe Creation Workflow**:
  1. Admin creates recipe (status: draft)
  2. Admin reviews/edits recipe
  3. Admin changes status to 'review'
  4. Admin calls POST /recipes/{id}/publish
  5. Recipe becomes visible in public API

  **Auto-Generated Fields**:
  - id: UUID v4
  - slug: from title
  - created_at: current timestamp
  - rating_avg: 0
  - rating_count: 0
  - view_count: 0
  - favorite_count: 0
end note

note left of [PublishController]
  **Publish Safeguards**:
  - Validates recipe completeness
  - Checks current status
  - Verifies admin permissions
  - Logs moderation action
  - Audit trail in database

  **Unpublish**:
  - Set status back to 'draft'
  - Recipe hidden from public API
  - Existing favorites/ratings preserved
end note

note bottom of [BatchImportController]
  **Batch Import Use Cases**:
  - LLM-generated recipes from JSON
  - CSV export from external source
  - Migration from old system
  - Partner content integration

  **CSV Format**:
  title,description,cuisine,difficulty,prep_time,...
  "Паста Карбонара","Классический...","italian",3,15,...

  **Duplicate Detection**:
  - By title (exact match)
  - By slug (generated from title)
  - Skip or overwrite (configurable)
end note

' ==================================================
' Legend
' ==================================================
legend right
  **Authentication Levels**:
  |<back:LightCoral> Admin </back>| Admin role required |
  |<back:LightGray> Internal </back>| Internal service |

  **OpenAPI Mapping**:
  Controllers → Paths
  Admin endpoints → /api/v1/admin/*

  **Sequence Diagrams**:
  Full request/response flows with schemas
  in diagrams/sequence/admin/

  **Dependencies**:
  - Auth Service: JWT validation, admin role check
  - Upload API: Image upload for recipes
  - PostgreSQL: Recipe data, jobs table
  - Redis: Cache invalidation
  - Job Queue: Async batch processing

  **Related Diagrams**:
  - database/enhanced_database_schema.puml
  - api_auth_endpoints.puml (Auth Service)
  - api_upload_endpoints.puml (Upload API)
  - error-handling/error_codes_mapping.puml
endlegend

@enduml
