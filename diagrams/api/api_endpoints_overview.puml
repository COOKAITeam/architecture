@startuml api_endpoints_overview

title COOKie API v1 - Component Overview\nOpenAPI-Ready Architecture

' Color coding for authentication levels
skinparam component {
  BackgroundColor<<Public>> LightBlue
  BackgroundColor<<Authenticated>> LightGreen
  BackgroundColor<<Admin>> LightCoral
  BackgroundColor<<Internal>> LightGray
}

skinparam database {
  BackgroundColor LightYellow
}

skinparam cloud {
  BackgroundColor LightSkyBlue
}

' ==================================================
' API Package Boundary
' ==================================================
package "COOKie REST API v1" {

  ' Public APIs (Light Blue)
  component [Recipe API] <<Public>>
  component [Search & Browse] <<Public>>

  ' Authenticated APIs (Light Green)
  component [Auth API] <<Authenticated>>
  component [User Profile API] <<Authenticated>>
  component [Favorites API] <<Authenticated>>
  component [Rating API] <<Authenticated>>

  ' Admin APIs (Light Coral)
  component [Admin Recipe API] <<Admin>>
  component [Upload API] <<Admin>>

  ' Internal Services (Gray)
  component [Auth Service] <<Internal>>
  component [Cache Service] <<Internal>>

  ' Data Stores
  database "PostgreSQL\nMain Database" as DB
  database "Redis\nCache Layer" as Cache

  ' External Services
  cloud "Yandex Object Storage\nImage CDN" as Storage
  cloud "OAuth Providers\nYandex ID, VK ID" as OAuth
}

' ==================================================
' Dependencies & Relationships (ALL shown)
' ==================================================

' Authentication Flow
[Auth API] --> [Auth Service] : authenticates
[Auth API] ..> OAuth : OAuth login
[Auth Service] --> DB : stores sessions

' User APIs depend on Auth
[User Profile API] --> [Auth Service] : validates JWT
[Favorites API] --> [Auth Service] : validates JWT
[Rating API] --> [Auth Service] : validates JWT

' Admin APIs require Admin role
[Admin Recipe API] --> [Auth Service] : requires admin role
[Upload API] --> [Auth Service] : requires admin role

' Favorites & Ratings update Recipe data
[Favorites API] ..> [Recipe API] : updates favorite_count
[Rating API] ..> [Recipe API] : updates rating_avg

' Admin creates content
[Admin Recipe API] --> [Upload API] : uploads images
[Admin Recipe API] --> DB : creates/updates recipes

' Upload stores images
[Upload API] --> Storage : stores images

' Recipe API uses cache
[Recipe API] --> [Cache Service] : 5min TTL
[Cache Service] --> Cache
[Recipe API] --> DB : reads recipes
[Search & Browse] --> DB

' ==================================================
' Notes (OpenAPI-relevant info)
' ==================================================

note right of [Recipe API]
  **Base Path**: /api/v1/recipes
  **Auth**: Public (no token required)
  **Rate Limit**: 1000 req/hour per IP
  **Cache**: Redis 5min TTL

  **Endpoints:**
  GET /recipes (search, filter, paginate)
  GET /recipes/{slug} (details)
  GET /recipes/popular
  GET /recipes/cuisines

  **Details**: api_recipe_endpoints.puml
end note

note right of [Auth API]
  **Base Path**: /api/v1/auth
  **Auth**: Mixed (public + JWT)
  **Rate Limit**: 10-50 req/hour per IP

  **Endpoints:**
  POST /auth/register (public)
  POST /auth/login (public)
  POST /auth/refresh (JWT)
  POST /auth/logout (JWT)
  GET  /auth/oauth/{provider} (public)

  **Details**: api_auth_endpoints.puml
end note

note right of [User Profile API]
  **Base Path**: /api/v1/users
  **Auth**: JWT Required
  **Rate Limit**: 5000 req/hour per user

  **Endpoints:**
  GET  /users/me (profile)
  PATCH /users/me (update)

  **Details**: api_user_endpoints.puml
end note

note right of [Favorites API]
  **Base Path**: /api/v1/recipes
  **Auth**: JWT Required
  **Limits**: Free=50 max, Premium=unlimited

  **Endpoints:**
  GET  /users/me/favorites
  POST /recipes/{id}/favorite
  DELETE /recipes/{id}/favorite

  **Details**: api_user_endpoints.puml
end note

note right of [Rating API]
  **Base Path**: /api/v1/recipes
  **Auth**: JWT Required
  **Constraint**: 1 rating per user per recipe

  **Endpoints:**
  POST  /recipes/{id}/rating
  PATCH /recipes/{id}/rating
  DELETE /recipes/{id}/rating

  **Details**: api_user_endpoints.puml
end note

note right of [Admin Recipe API]
  **Base Path**: /api/v1/admin
  **Auth**: JWT + Admin Role Required
  **Rate Limit**: Unlimited for admins

  **Endpoints:**
  POST  /admin/recipes (create)
  PATCH /admin/recipes/{id} (update)
  DELETE /admin/recipes/{id} (delete)
  POST  /admin/recipes/{id}/publish
  POST  /admin/recipes/batch (import)
  GET   /admin/stats (dashboard)

  **Details**: api_admin_endpoints.puml
end note

note right of [Upload API]
  **Base Path**: /api/v1/upload
  **Auth**: JWT + Admin Role Required
  **Max Size**: 5MB per image

  **Endpoints:**
  POST  /upload/image (single)
  POST  /upload/images/batch (bulk)
  DELETE /upload/image/{id}
  GET   /upload/images (list)

  **Details**: api_upload_endpoints.puml
end note

note bottom of DB
  **Database**: PostgreSQL 15+
  **Tables**: users, recipes, ingredients,
  user_favorites, user_ratings, etc.

  See: database/enhanced_database_schema.puml
end note

note bottom of Cache
  **Cache Strategy**:
  - Recipe list: 5min TTL
  - Recipe details: 10min TTL
  - Popular recipes: 15min TTL
  - Invalidate on create/update/delete

  See: caching/cache_strategy_overview.puml
end note

' ==================================================
' Legend
' ==================================================
legend right
  **Authentication Levels:**
  |<back:LightBlue> Public </back>| No authentication required |
  |<back:LightGreen> Authenticated </back>| JWT token required |
  |<back:LightCoral> Admin </back>| JWT + admin role required |
  |<back:LightGray> Internal </back>| Internal service (not exposed) |

  **Relationship Types:**
  --> Requires / Uses
  ..> Updates / Affects

  **OpenAPI Mapping:**
  Components → OpenAPI Tags
  Endpoints → OpenAPI Paths
  Auth Levels → Security Schemes
endlegend

@enduml
