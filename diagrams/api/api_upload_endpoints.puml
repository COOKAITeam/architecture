@startuml api_upload_endpoints

title COOKie MVP - Image Upload API\nUML Component Diagram

' Color coding for authentication levels
skinparam component {
  BackgroundColor<<Admin>> LightCoral
  BackgroundColor<<Internal>> LightGray
}

skinparam database {
  BackgroundColor LightYellow
}

skinparam cloud {
  BackgroundColor LightCyan
}

' ==================================================
' Upload Service Components
' ==================================================
package "Upload API" {

  ' Admin endpoints (JWT + Admin role required)
  component [ImageUploadController] <<Admin>>
  component [BatchUploadController] <<Admin>>
  component [ImageManagementController] <<Admin>>

  ' Internal services
  component [Image Validation Service] <<Internal>>
  component [Image Processing Service] <<Internal>>
  component [Storage Service] <<Internal>>
}

' External dependencies
database "PostgreSQL\nuploads table" as DB
cloud "Yandex Object Storage\nCDN: cdn.cookie.com" as ObjectStorage
component [Auth Service] <<Internal>> as AuthService

' ==================================================
' Component Relationships & Dependencies
' ==================================================

' Single upload flow
[ImageUploadController] --> AuthService : validate admin role
[ImageUploadController] --> [Image Validation Service] : validate file
[ImageUploadController] --> [Image Processing Service] : resize & convert
[ImageUploadController] --> [Storage Service] : upload to cloud
[Image Validation Service] --> [Image Processing Service] : extract metadata
[Image Processing Service] --> [Storage Service] : send variants
[Storage Service] --> ObjectStorage : PUT objects
[Storage Service] --> DB : store metadata

' Batch upload flow
[BatchUploadController] --> AuthService : validate admin role
[BatchUploadController] --> [Image Validation Service] : validate all
[BatchUploadController] --> [Image Processing Service] : process parallel
[BatchUploadController] --> [Storage Service] : upload all
[BatchUploadController] --> DB : store all metadata

' Management flow
[ImageManagementController] --> AuthService : validate admin role
[ImageManagementController] --> DB : query/delete metadata
[ImageManagementController] --> ObjectStorage : delete objects
[ImageManagementController] --> DB : check recipe usage

' ==================================================
' Endpoint Specifications (OpenAPI-relevant)
' ==================================================

note right of [ImageUploadController]
  **Endpoint**: POST /api/v1/upload/image

  **Auth**: Admin Role (ðŸ‘‘)
  **Rate Limit**: Unlimited for admins
  **Max File Size**: 5MB
  **Timeout**: 30 seconds

  **Content-Type**: multipart/form-data
  - file: binary data (required)
  - category: recipe | avatar | other (optional)
  - resize: bool (default: true)
  - generate_thumbnails: bool (default: true)

  **Supported Formats**:
  - JPEG (.jpg, .jpeg)
  - PNG (.png)
  - WebP (.webp)

  **Validation**:
  - File size: 1KB - 5MB
  - Dimensions: 200x200 - 4000x4000 pixels
  - MIME type: verified via magic bytes
  - No malicious code

  **Responses**:
  - 201 Created (image uploaded with variants)
  - 400 Bad Request (invalid format)
  - 413 Payload Too Large
  - 422 Invalid image dimensions
  - 502 Storage error

  **Details**: sequence/upload/sequence_upload_image.puml
end note

note right of [BatchUploadController]
  **Endpoint**: POST /api/v1/upload/images/batch

  **Auth**: Admin Role (ðŸ‘‘)
  **Rate Limit**: Unlimited
  **Max Files**: 10 per request
  **Max Total Size**: 20MB
  **Timeout**: 60 seconds

  **Content-Type**: multipart/form-data
  - files[]: multiple binary files
  - category: recipe | avatar | other
  - resize: bool
  - generate_thumbnails: bool

  **Responses**:
  - 200 OK (partial success supported)
    - uploaded: array of successful uploads
    - failed: array of failed uploads with errors
    - summary: total, uploaded, failed counts
  - 400 Bad Request (too many files)
  - 413 Total size exceeded

  **Batch Processing**:
  - Each file processed independently
  - Parallel processing (max 3 concurrent)
  - Failed files don't block successful uploads
  - Transaction per file
  - Returns partial results

  **Details**: sequence/upload/sequence_upload_batch.puml
end note

note right of [ImageManagementController]
  **Endpoints**:
  - GET /api/v1/upload/images
  - DELETE /api/v1/upload/image/{id}

  **Auth**: Admin Role (ðŸ‘‘)
  **Rate Limit**: Unlimited

  **GET Query Params**:
  - page, per_page: Pagination (default 50, max 100)
  - category: Filter by category
  - uploaded_after: Filter by date (ISO 8601)
  - sort: uploaded_at | file_size | original_filename
  - order: asc | desc

  **GET Responses**:
  - 200 OK (paginated image list)

  **DELETE Responses**:
  - 204 No Content
  - 404 Not Found
  - 409 Conflict (image in use by recipes)

  **Deletion Safety**:
  - Check if used by any recipes
  - If in use: return 409 with recipe list
  - If not in use: delete all variants + metadata
  - CDN cache purge (async)

  **Details**: sequence/upload/sequence_upload_manage.puml
end note

note bottom of [Image Validation Service]
  **File Validation**:
  - MIME type verification (magic bytes)
  - File size: 1KB - 5MB
  - Image dimensions: 200x200 - 4000x4000 px
  - Format: JPEG, PNG, WebP only
  - Structure: valid image header/footer
  - Security: scan for malicious content

  **Metadata Extraction**:
  - Original filename
  - MIME type
  - Dimensions (width, height)
  - File size (bytes)
  - EXIF data (for processing, then stripped)
end note

note bottom of [Image Processing Service]
  **Image Processing Pipeline**:
  1. Strip EXIF data (privacy)
  2. Auto-rotate based on orientation
  3. Generate 3 variants:
     - Large: 1200px max (aspect ratio preserved)
     - Medium: 600px max (aspect ratio preserved)
     - Thumbnail: 200x200 (center crop, square)
  4. Convert to WebP (80% quality)
  5. Keep original format as fallback

  **WebP Conversion**:
  - Quality: 80% (balance size/quality)
  - Lossy compression
  - ~30% smaller than JPEG

  **Tools**:
  - Sharp.js (Node.js) or ImageSharp (C#)
  - Hardware acceleration enabled
end note

note bottom of [Storage Service]
  **Yandex Object Storage Integration**:

  **Bucket Structure**:
  - Bucket: cookie-production
  - Folders: /recipes/, /avatars/, /other/

  **Filename Convention**:
  {uuid}-{variant}.{ext}
  - abc123-original.jpg
  - abc123-1200x800.webp
  - abc123-600x400.webp
  - abc123-200x200.webp

  **CDN Configuration**:
  - Domain: cdn.cookie.com
  - Cache TTL: 1 year (immutable files)
  - Compression: Brotli + Gzip
  - HTTPS only

  **Upload Strategy**:
  - Retry on failure (max 3 times)
  - Exponential backoff (1s, 2s, 4s)
  - Circuit breaker pattern
  - Cleanup temp files on error
end note

note left of [ImageUploadController]
  **Upload Response Structure**:
  {
    "id": "uuid",
    "original_filename": "pasta-carbonara.jpg",
    "file_size": 1024768,
    "mime_type": "image/jpeg",
    "width": 1200,
    "height": 800,
    "urls": {
      "original": "https://cdn.cookie.com/recipes/abc123-original.jpg",
      "large": "https://cdn.cookie.com/recipes/abc123-1200x800.webp",
      "medium": "https://cdn.cookie.com/recipes/abc123-600x400.webp",
      "thumbnail": "https://cdn.cookie.com/recipes/abc123-200x200.webp"
    },
    "uploaded_at": "2025-10-16T17:00:00Z",
    "uploaded_by": "uuid",
    "category": "recipe"
  }
end note

note left of [BatchUploadController]
  **Batch Upload Use Cases**:
  - Recipe with multiple step images
  - Bulk content import
  - Gallery uploads

  **Performance**:
  - Parallel processing (max 3 concurrent)
  - Fail-fast for invalid files
  - Continue on single failure
  - Return partial results

  **Error Handling**:
  - Collect all errors
  - Return success + failure lists
  - Log errors with context
end note

note bottom of [ImageManagementController]
  **Admin Image Management**:
  - List all uploaded images
  - Filter by category, date
  - Search by filename
  - Sort by size, date
  - View usage (which recipes use this image)
  - Bulk operations (future)

  **Performance**:
  - Indexed queries on uploads table
  - Pagination required
  - No expensive joins
  - Fast response times
end note

' ==================================================
' Security & Error Handling
' ==================================================

note bottom of ObjectStorage
  **Security Considerations**:

  **File Upload Security**:
  - Validate MIME type via magic bytes
  - Scan for malicious content (future)
  - Limit file size (prevent DoS)
  - Limit upload rate (prevent abuse)
  - Generate random filenames (prevent path traversal)

  **Access Control**:
  - Admin-only upload (MVP)
  - User uploads (future: avatars)
  - Public read, private write
  - Pre-signed URLs (future)

  **CORS Configuration**:
  - Allow uploads from cookie.com domain
  - HTTPS only
  - Appropriate headers

  **Content Security**:
  - Serve images from CDN (not API)
  - Content-Security-Policy headers
  - Prevent hotlinking (optional referer check)
end note

' ==================================================
' Legend
' ==================================================
legend right
  **Authentication Levels**:
  |<back:LightCoral> Admin </back>| Admin role required |
  |<back:LightGray> Internal </back>| Internal service |

  **OpenAPI Mapping**:
  Controllers â†’ Paths
  Admin endpoints â†’ /api/v1/upload/*

  **Sequence Diagrams**:
  Full request/response flows with schemas
  in diagrams/sequence/upload/

  **Dependencies**:
  - Auth Service: JWT validation, admin role check
  - Yandex Object Storage: Cloud storage + CDN
  - PostgreSQL: Upload metadata
  - Image processing: Sharp.js or ImageSharp

  **Related Diagrams**:
  - api_admin_endpoints.puml (Admin uses Upload API)
  - deployment/object_storage_architecture.puml
  - error-handling/error_flow_object_storage_failure.puml
endlegend

@enduml
