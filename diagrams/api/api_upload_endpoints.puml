@startuml api_upload_endpoints

!define TITLE COOKie MVP - Image Upload API Endpoints
!define VERSION 1.0
!define DATE 2025-10-16

title TITLE\nVersion VERSION\nLast Updated: DATE

' Cross-references:
' - api_endpoints_overview.puml (API overview)
' - sequence/sequence_upload_recipe_image.puml (Upload flow)
' - deployment/object_storage_architecture.puml (Yandex Object Storage)
' - error-handling/error_flow_object_storage_failure.puml (Error handling)

skinparam componentStyle rectangle
skinparam noteStyle rectangle

component "POST /api/v1/upload/image" as upload_single {
  **Purpose**: Upload single image to Yandex Object Storage
  **Authentication**: JWT + Admin Role (üëë)
  **Rate Limit**: Unlimited for admins
  **Max File Size**: 5MB
  **Timeout**: 30 seconds
  --
  **Request Headers:**
  Authorization: Bearer {access_token}
  Content-Type: multipart/form-data
  --
  **Request Body (multipart/form-data):**
  file: <binary data>
  category: "recipe" // optional: recipe, avatar, other
  resize: true // optional: auto-resize, default: true
  generate_thumbnails: true // optional, default: true
  --
  **Supported Formats:**
  - JPEG (.jpg, .jpeg)
  - PNG (.png)
  - WebP (.webp)
  --
  **File Validation:**
  ‚Ä¢ File size:
    - Max: 5MB (5,242,880 bytes)
    - Min: 1KB (1,024 bytes)

  ‚Ä¢ Image dimensions:
    - Min: 200x200 pixels
    - Max: 4000x4000 pixels

  ‚Ä¢ MIME type:
    - Must match file extension
    - Verified via magic bytes

  ‚Ä¢ Content:
    - No malicious code
    - Valid image structure
  --
  **Response 201 Created:**
  {
    "id": "uuid",
    "original_filename": "pasta-carbonara.jpg",
    "file_size": 1024768,
    "mime_type": "image/jpeg",
    "width": 1200,
    "height": 800,
    "urls": {
      "original": "https://cdn.cookie.com/recipes/abc123-original.jpg",
      "large": "https://cdn.cookie.com/recipes/abc123-1200x800.webp",
      "medium": "https://cdn.cookie.com/recipes/abc123-600x400.webp",
      "thumbnail": "https://cdn.cookie.com/recipes/abc123-200x200.webp"
    },
    "uploaded_at": "2025-10-16T17:00:00Z",
    "uploaded_by": "uuid",
    "category": "recipe"
  }
  --
  **Response 400 Bad Request:**
  {
    "type": "https://api.cookie.com/errors/invalid-file",
    "title": "Invalid File",
    "status": 400,
    "detail": "File format not supported",
    "instance": "/api/v1/upload/image",
    "errors": [
      {
        "field": "file",
        "message": "Only JPEG, PNG, and WebP formats are supported"
      }
    ],
    "supported_formats": ["image/jpeg", "image/png", "image/webp"]
  }
  --
  **Response 413 Payload Too Large:**
  {
    "type": "https://api.cookie.com/errors/file-too-large",
    "title": "File Too Large",
    "status": 413,
    "detail": "File size exceeds maximum allowed size",
    "instance": "/api/v1/upload/image",
    "max_size_bytes": 5242880,
    "max_size_mb": 5,
    "actual_size_bytes": 8388608
  }
  --
  **Response 422 Unprocessable Entity:**
  {
    "type": "https://api.cookie.com/errors/invalid-image",
    "title": "Invalid Image",
    "status": 422,
    "detail": "Image validation failed",
    "instance": "/api/v1/upload/image",
    "errors": [
      {
        "field": "dimensions",
        "message": "Image must be at least 200x200 pixels"
      }
    ]
  }
  --
  **Response 502 Bad Gateway:**
  {
    "type": "https://api.cookie.com/errors/storage-error",
    "title": "Object Storage Error",
    "status": 502,
    "detail": "Failed to upload image to storage",
    "instance": "/api/v1/upload/image",
    "retry_after": 30
  }
  --
  **Image Processing Pipeline:**
  1. Validate file format and size
  2. Scan for malicious content
  3. Extract image metadata (dimensions, EXIF)
  4. Generate unique filename (UUID + extension)
  5. Resize image (if resize=true):
     - Large: 1200x800 (maintain aspect ratio)
     - Medium: 600x400
     - Thumbnail: 200x200 (crop to square)
  6. Convert to WebP (80% quality)
  7. Upload all variants to Object Storage
  8. Return CDN URLs
  --
  **Side Effects:**
  - Uploads image to Yandex Object Storage
  - Generates 3 image variants (large, medium, thumbnail)
  - Stores metadata in database (uploads table)
  - Removes EXIF data (privacy)
  - Sets cache headers (1 year)
}

component "POST /api/v1/upload/images/batch" as upload_batch {
  **Purpose**: Upload multiple images in single request
  **Authentication**: JWT + Admin Role (üëë)
  **Rate Limit**: Unlimited for admins
  **Max Files**: 10 per request
  **Max Total Size**: 20MB
  **Timeout**: 60 seconds
  --
  **Request Headers:**
  Authorization: Bearer {access_token}
  Content-Type: multipart/form-data
  --
  **Request Body (multipart/form-data):**
  files[]: <binary data> // multiple files
  category: "recipe"
  resize: true
  generate_thumbnails: true
  --
  **Response 200 OK:**
  {
    "uploaded": [
      {
        "index": 0,
        "id": "uuid1",
        "original_filename": "image1.jpg",
        "urls": {
          "original": "https://cdn.cookie.com/recipes/uuid1-original.jpg",
          "large": "https://cdn.cookie.com/recipes/uuid1-1200x800.webp",
          "medium": "https://cdn.cookie.com/recipes/uuid1-600x400.webp",
          "thumbnail": "https://cdn.cookie.com/recipes/uuid1-200x200.webp"
        }
      },
      {
        "index": 1,
        "id": "uuid2",
        "original_filename": "image2.jpg",
        "urls": { /* ... */ }
      }
    ],
    "failed": [
      {
        "index": 2,
        "original_filename": "invalid.bmp",
        "error": {
          "type": "invalid-format",
          "message": "Format not supported"
        }
      }
    ],
    "summary": {
      "total": 3,
      "uploaded": 2,
      "failed": 1
    }
  }
  --
  **Response 400 Bad Request:**
  {
    "type": "https://api.cookie.com/errors/batch-limit",
    "title": "Batch Upload Limit Exceeded",
    "status": 400,
    "detail": "Maximum 10 files per batch",
    "instance": "/api/v1/upload/images/batch",
    "max_files": 10,
    "actual_files": 15
  }
  --
  **Response 413 Payload Too Large:**
  {
    "type": "https://api.cookie.com/errors/total-size-exceeded",
    "title": "Total Size Too Large",
    "status": 413,
    "detail": "Total size of all files exceeds limit",
    "instance": "/api/v1/upload/images/batch",
    "max_total_size_mb": 20,
    "actual_total_size_mb": 25.3
  }
  --
  **Batch Processing:**
  - Each file processed independently
  - Partial success supported (some pass, some fail)
  - Failed files don't block successful uploads
  - Transaction per file (not global)
  - Parallel processing (up to 3 concurrent)
  --
  **Side Effects:**
  - Uploads all valid images to Object Storage
  - Returns URLs for successful uploads
  - Returns errors for failed uploads
  - Logs failed uploads for debugging
}

component "DELETE /api/v1/upload/image/{id}" as delete_image {
  **Purpose**: Delete uploaded image from storage
  **Authentication**: JWT + Admin Role (üëë)
  **Rate Limit**: Unlimited for admins
  --
  **Path Parameters:**
  ‚Ä¢ id (uuid, required): Image upload ID
  --
  **Query Parameters:**
  ‚Ä¢ delete_variants (boolean, optional): Delete all variants
    - Default: true
    - If false: only deletes original
  --
  **Response 204 No Content:**
  - No response body
  - Image successfully deleted
  --
  **Response 404 Not Found:**
  {
    "type": "https://api.cookie.com/errors/not-found",
    "title": "Image Not Found",
    "status": 404,
    "detail": "Image with id 'uuid' does not exist",
    "instance": "/api/v1/upload/image/uuid"
  }
  --
  **Response 409 Conflict:**
  {
    "type": "https://api.cookie.com/errors/image-in-use",
    "title": "Cannot Delete Image",
    "status": 409,
    "detail": "Image is currently used by 3 recipe(s)",
    "instance": "/api/v1/upload/image/uuid",
    "used_by_recipes": [
      {
        "id": "uuid1",
        "title": "–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞"
      }
    ]
  }
  --
  **Side Effects:**
  - Deletes image from Object Storage
  - Deletes all variants (large, medium, thumbnail)
  - Deletes metadata from uploads table
  - Prevents deletion if image is in use
}

component "GET /api/v1/upload/images" as list_images {
  **Purpose**: List uploaded images (for admin panel)
  **Authentication**: JWT + Admin Role (üëë)
  **Rate Limit**: Unlimited for admins
  **Cache**: No caching
  --
  **Query Parameters:**
  ‚Ä¢ page (integer, optional): Page number
    - Default: 1

  ‚Ä¢ per_page (integer, optional): Items per page
    - Default: 50
    - Max: 100

  ‚Ä¢ category (string, optional): Filter by category
    - Values: recipe, avatar, other

  ‚Ä¢ uploaded_after (datetime, optional): Filter by date
    - Format: ISO 8601

  ‚Ä¢ sort (string, optional): Sort field
    - Default: uploaded_at
    - Values: uploaded_at, file_size, original_filename

  ‚Ä¢ order (string, optional): Sort direction
    - Default: desc
    - Values: asc, desc
  --
  **Response 200 OK:**
  {
    "data": [
      {
        "id": "uuid",
        "original_filename": "pasta-carbonara.jpg",
        "file_size": 1024768,
        "mime_type": "image/jpeg",
        "width": 1200,
        "height": 800,
        "category": "recipe",
        "urls": {
          "original": "https://cdn.cookie.com/recipes/abc123-original.jpg",
          "large": "https://cdn.cookie.com/recipes/abc123-1200x800.webp",
          "medium": "https://cdn.cookie.com/recipes/abc123-600x400.webp",
          "thumbnail": "https://cdn.cookie.com/recipes/abc123-200x200.webp"
        },
        "uploaded_at": "2025-10-16T17:00:00Z",
        "uploaded_by": {
          "id": "uuid",
          "email": "admin@cookie.com"
        },
        "used_by_recipes_count": 1
      }
    ],
    "pagination": {
      "page": 1,
      "per_page": 50,
      "total_pages": 12,
      "total_items": 587
    }
  }
}

note right of upload_single
  **Yandex Object Storage Integration:**

  **Bucket Structure:**
  - Bucket: cookie-production
  - Folder: /recipes/ (for recipe images)
  - Folder: /avatars/ (for user avatars)
  - Folder: /other/ (for misc images)

  **Filename Convention:**
  {uuid}-{variant}.{ext}

  Example:
  - abc123-original.jpg
  - abc123-1200x800.webp
  - abc123-600x400.webp
  - abc123-200x200.webp

  **CDN Configuration:**
  - CDN: Yandex CDN (integrated with Object Storage)
  - Domain: cdn.cookie.com
  - Cache: 1 year (immutable files)
  - Compression: Brotli + Gzip
end note

note right of upload_batch
  **Batch Upload Performance:**

  **Processing Strategy:**
  - Parallel uploads (max 3 concurrent)
  - Each file processed independently
  - Fail-fast for invalid files
  - Continue processing on single failure

  **Use Cases:**
  - Recipe with multiple step images
  - Bulk content import
  - Gallery uploads

  **Limitations:**
  - Max 10 files per batch
  - Max 20MB total size
  - 60 second timeout
  - For larger batches: use multiple requests
end note

note bottom of delete_image
  **Deletion Safety:**

  **Checks Before Delete:**
  1. Verify image exists
  2. Check if used by any recipes
  3. If in use: return 409 Conflict
  4. If not in use: proceed with deletion

  **Cascade Deletion:**
  - Original image
  - All generated variants
  - Database metadata
  - CDN cache purge (async)

  **Soft Delete Alternative (Future):**
  - Mark as deleted (don't remove files)
  - Keep for 30 days (recovery period)
  - Permanently delete after 30 days
end note

note bottom of list_images
  **Admin Image Management:**

  **Features:**
  - List all uploaded images
  - Filter by category, date
  - Search by filename
  - Sort by size, date
  - View usage (which recipes)
  - Bulk operations (future)

  **Performance:**
  - Indexed queries on uploads table
  - Pagination required
  - No expensive joins
  - Fast response times
end note

component "Image Optimization Details" as optimization {
  **Resize Strategy:**
  - Large: 1200px max width/height (aspect ratio preserved)
  - Medium: 600px max width/height (aspect ratio preserved)
  - Thumbnail: 200x200 (center crop, square)

  **WebP Conversion:**
  - Quality: 80% (good balance of size/quality)
  - Lossy compression
  - Fallback: keep original JPEG/PNG

  **Optimization Tools:**
  - Sharp.js (Node.js) or ImageSharp (C#)
  - Hardware acceleration where available

  **Storage Savings:**
  - WebP: ~30% smaller than JPEG (same quality)
  - Responsive images: serve right size to device
  - CDN caching: reduce origin requests

  **EXIF Data Handling:**
  - Strip all EXIF data (privacy)
  - Preserve orientation (auto-rotate)
  - Remove GPS coordinates
  - Remove camera metadata
}

component "Error Handling & Retries" as errors {
  **Client-Side (Frontend):**
  - Show upload progress bar
  - Retry failed uploads (max 3 attempts)
  - Exponential backoff (1s, 2s, 4s)
  - Display clear error messages

  **Server-Side:**
  - Validate before processing (fail fast)
  - Timeout after 30 seconds
  - Return partial results for batch
  - Log errors with context

  **Object Storage Failures:**
  - Retry upload to storage (max 3 times)
  - Use circuit breaker pattern
  - Fallback: queue for later processing
  - Alert admins if persistent failures

  **Network Issues:**
  - Client can resume uploads (chunked upload, future)
  - Server buffers file temporarily
  - Cleanup temp files on failure
}

component "Security Considerations" as security {
  **File Upload Security:**
  - Validate MIME type via magic bytes (not just extension)
  - Scan for malicious content (anti-virus, future)
  - Limit file size (prevent DoS)
  - Limit upload rate (prevent abuse)
  - Generate random filenames (prevent path traversal)

  **Access Control:**
  - Admin-only upload (MVP)
  - User uploads (future: avatars)
  - Public read, private write
  - Pre-signed URLs for direct upload (future)

  **CORS Configuration:**
  - Allow uploads from cookie.com domain
  - Restrict to HTTPS only
  - Set appropriate headers

  **Content Security:**
  - Serve images from CDN (not API server)
  - Set Content-Security-Policy headers
  - Prevent hotlinking (referer check, optional)
}

@enduml
