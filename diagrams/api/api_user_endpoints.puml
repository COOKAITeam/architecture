@startuml api_user_endpoints

title COOKie MVP - User & Favorites API\nUML Component Diagram

' Color coding for authentication levels
skinparam component {
  BackgroundColor<<Authenticated>> LightGreen
  BackgroundColor<<Internal>> LightGray
}

skinparam database {
  BackgroundColor LightYellow
}

' ==================================================
' User Service Components
' ==================================================
package "User API" {

  ' Authenticated endpoints (JWT required)
  component [ProfileController] <<Authenticated>>
  component [FavoritesController] <<Authenticated>>
  component [RatingController] <<Authenticated>>

  ' Internal services
  component [Profile Validation Service] <<Internal>>
  component [Rating Aggregation Service] <<Internal>>
}

' External dependencies
database "PostgreSQL\nusers, user_profiles,\nuser_favorites,\nuser_recipe_ratings" as DB
component [Auth Service] <<Internal>> as AuthService
component [Recipe API] <<Internal>> as RecipeAPI

' ==================================================
' Component Relationships & Dependencies
' ==================================================

' Profile flow
[ProfileController] --> AuthService : validate JWT
[ProfileController] --> [Profile Validation Service] : validate data
[ProfileController] --> DB : read/write user data

' Favorites flow
[FavoritesController] --> AuthService : validate JWT
[FavoritesController] --> DB : read/write favorites
[FavoritesController] --> RecipeAPI : update counters

' Rating flow
[RatingController] --> AuthService : validate JWT
[RatingController] --> DB : read/write ratings
[RatingController] --> [Rating Aggregation Service] : recalculate avg
[RatingController] --> RecipeAPI : update counters
[Rating Aggregation Service] --> DB : update recipe.rating_avg

' ==================================================
' Endpoint Specifications (OpenAPI-relevant)
' ==================================================

note right of [ProfileController]
  **Endpoints**:
  - GET /api/v1/users/me
  - PATCH /api/v1/users/me

  **Auth**: JWT Required (üîê)
  **Rate Limit**: 5000 req/hour (GET), 100 req/hour (PATCH)

  **GET Responses**:
  - 200 OK (user profile with stats)
  - 401 Unauthorized

  **PATCH Responses**:
  - 200 OK (updated profile)
  - 409 Conflict (username taken)
  - 422 Validation error

  **Updatable Fields**:
  - Personal: first_name, last_name, username, avatar
  - Profile: height, weight, activity_level, goal
  - Preferences: dietary, allergies, cuisines

  **Details**: sequence/user/sequence_user_profile.puml
end note

note right of [FavoritesController]
  **Endpoints**:
  - GET /api/v1/users/me/favorites
  - POST /api/v1/recipes/{id}/favorite
  - DELETE /api/v1/recipes/{id}/favorite

  **Auth**: JWT Required (üîê)
  **Rate Limit**: 5000 req/hour (GET), 1000 req/hour (POST/DELETE)

  **GET Responses**:
  - 200 OK (paginated favorites list)

  **POST Responses**:
  - 201 Created
  - 404 Recipe Not Found
  - 409 Already Favorited
  - 403 Favorites Limit (free: 50 max)

  **DELETE Responses**:
  - 204 No Content
  - 404 Not Found

  **Side Effects**:
  - Updates recipe.favorite_count
  - Invalidates favorites cache
  - Sends analytics event

  **Details**: sequence/user/sequence_user_favorites.puml
end note

note right of [RatingController]
  **Endpoints**:
  - POST /api/v1/recipes/{id}/rating
  - PATCH /api/v1/recipes/{id}/rating
  - DELETE /api/v1/recipes/{id}/rating

  **Auth**: JWT Required (üîê)
  **Rate Limit**: 500 req/hour

  **POST Responses**:
  - 201 Created
  - 404 Recipe Not Found
  - 409 Already Rated

  **PATCH Responses**:
  - 200 OK (updated rating)
  - 404 Rating Not Found

  **DELETE Responses**:
  - 204 No Content
  - 404 Rating Not Found

  **Rating Rules**:
  - Value: 1-5 (integer)
  - Review: optional, 10-2000 chars
  - One rating per user per recipe

  **Side Effects**:
  - Recalculates recipe.rating_avg
  - Updates recipe.rating_count
  - Invalidates recipe cache

  **Details**: sequence/user/sequence_user_rating.puml
end note

note bottom of [Profile Validation Service]
  **Validation Rules**:
  - username: 3-30 chars, alphanumeric + underscore, unique
  - height_cm: 100-250
  - weight_kg: 30.0-300.0
  - cooking_skill_level: 1-5
  - max_cooking_time: 10-300 minutes
  - dietary_preferences: enum validation
  - activity_level: enum validation
  - goal: enum validation
end note

note bottom of [Rating Aggregation Service]
  **Rating Aggregation**:
  - recipe.rating_avg = AVG(all ratings)
  - recipe.rating_count = COUNT(all ratings)

  **Recalculation Trigger**:
  - On INSERT/UPDATE/DELETE rating
  - Background job for high-traffic recipes
  - Real-time for low-traffic recipes

  **Performance**:
  - Indexed query on user_recipe_ratings
  - Batch updates for multiple ratings
end note

note left of [ProfileController]
  **User Profile Structure**:
  - Core: email, name, role, subscription
  - Profile: physical params, goals, preferences
  - Stats: favorites_count, ratings_count, views

  **Privacy**:
  - Users access own profile only
  - Admin can access any profile
  - Public profile view (future)
end note

note left of [FavoritesController]
  **Favorites Limits by Tier**:

  **Free**: 50 recipes max
  - HTTP 403 when limit reached
  - Upgrade prompt in response

  **Premium/Pro**: Unlimited

  **Filters**:
  - Same as recipe search
  - Sort by: date, title, rating, time
  - Pagination: 20 per page
end note

note bottom of [RatingController]
  **Review Moderation**:
  - Auto-filter profanity (future)
  - Manual moderation queue (future)
  - Users can edit within 24h

  **Optimistic UI Pattern**:
  - Frontend optimistically updates
  - On error: revert UI
  - On conflict: show existing rating
end note

' ==================================================
' Legend
' ==================================================
legend right
  **Authentication Levels**:
  |<back:LightGreen> Authenticated </back>| JWT required |
  |<back:LightGray> Internal </back>| Internal service |

  **OpenAPI Mapping**:
  Controllers ‚Üí Paths
  Authenticated endpoints ‚Üí /api/v1/users/*, /api/v1/recipes/{id}/favorite

  **Sequence Diagrams**:
  Full request/response flows with schemas
  in diagrams/sequence/user/

  **Dependencies**:
  - Auth Service: JWT validation, role check
  - Recipe API: Update counters (favorite_count, rating_count)
  - PostgreSQL: User data, favorites, ratings

  **Related Diagrams**:
  - database/enhanced_database_schema.puml
  - api_auth_endpoints.puml (Auth Service)
  - api_recipe_endpoints.puml (Recipe API)
  - error-handling/error_codes_mapping.puml
endlegend

@enduml
