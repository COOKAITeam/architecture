@startuml COOKie_Container_C4_Level2
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

LAYOUT_TOP_DOWN()
LAYOUT_WITH_LEGEND()

title Container Diagram for COOKie Platform (C4 Level 2)

Person(user_b2c, "B2C Пользователь", "Целевая аудитория платформы")
Person(user_admin, "Контент-менеджер", "Управляет контентом")
Person(partner, "B2B Партнер", "Ритейлер")

System_Boundary(cookie_platform, "COOKie Platform") {

    ' Frontend контейнеры
    Container(web_app, "Web Application", "React/Next.js", "Веб-приложение для планирования питания, поиска рецептов")
    Container(mobile_app, "Mobile Application", "React Native", "Нативное мобильное приложение (iOS/Android)")
    Container(admin_panel, "Admin Panel", "React/Next.js", "Панель управления контентом и модерация")
    Container(partner_portal, "Partner Portal", "React/Next.js", "Портал для B2B партнеров")

    ' API Gateway
    Container(api_gateway, "API Gateway", "Node.js/Express", "Единая точка входа, маршрутизация, rate limiting, аутентификация")

    ' MVP микросервисы
    Container(recipe_service, "Recipe Service", "Node.js/NestJS", "Управление рецептами, поиск, фильтрация, рейтинги")
    Container(parser_service, "Parser Service", "Python/FastAPI", "Парсинг рецептов с внешних источников, дедупликация")
    Container(enrichment_service, "Data Enrichment Service", "Python/FastAPI", "Нормализация данных, расчет КБЖУ, классификация")
    Container(analytics_service, "Analytics Service", "Python/FastAPI", "Сбор событий, метрики, A/B тесты")

    ' Вспомогательные сервисы
    Container(user_service, "User Service", "Node.js/NestJS", "Управление профилями пользователей, предпочтениями")
    Container(auth_service, "Auth Service", "Node.js/NestJS", "Аутентификация, авторизация, JWT токены")
    Container(notification_service, "Notification Service", "Node.js", "Email, Push, SMS уведомления")
    Container(payment_service, "Payment Service", "Node.js/NestJS", "Обработка подписок, биллинг")

    ' Будущие сервисы (пунктир)
    Container(ai_service, "AI Nutritionist Service", "Python/FastAPI", "ИИ-рекомендации, чат-бот", $tags="future")
    Container(meal_planning_service, "Meal Planning Service", "Python/FastAPI", "Автоматическое планирование питания", $tags="future")
    Container(order_service, "Order Service", "Node.js/NestJS", "Управление заказами готовой еды", $tags="future")

    ' Базы данных
    ContainerDb(recipe_db, "Recipe Database", "PostgreSQL", "Рецепты, ингредиенты, категории, рейтинги")
    ContainerDb(user_db, "User Database", "PostgreSQL", "Пользователи, профили, подписки")
    ContainerDb(analytics_db, "Analytics Database", "ClickHouse", "События, метрики, логи пользовательской активности")

    ' Кэш и очереди
    ContainerDb(cache, "Cache", "Redis", "Кэширование часто запрашиваемых данных, сессии")
    Container(message_queue, "Message Queue", "RabbitMQ/Kafka", "Асинхронная обработка задач, события")

    ' Хранилище файлов
    ContainerDb(file_storage, "File Storage", "S3/MinIO", "Изображения рецептов, аватары пользователей")
}

' Внешние системы
System_Ext(recipe_sources, "Recipe Sources", "Внешние источники рецептов")
System_Ext(delivery_apis, "Delivery APIs", "API ритейлеров (X5, ВкусВилл, и др.)")
System_Ext(llm_providers, "LLM Providers", "OpenAI, Anthropic для ИИ-диетолога")
System_Ext(payment_gateways, "Payment Gateways", "ЮKassa, CloudPayments")
System_Ext(external_services, "External Services", "Email, Push, SMS провайдеры")

' Связи пользователей с фронтендом
Rel(user_b2c, web_app, "Использует", "HTTPS")
Rel(user_b2c, mobile_app, "Использует", "HTTPS")
Rel(user_admin, admin_panel, "Управляет контентом", "HTTPS")
Rel(partner, partner_portal, "Управляет каталогом", "HTTPS")

' Связи фронтенда с API Gateway
Rel(web_app, api_gateway, "API запросы", "HTTPS/JSON")
Rel(mobile_app, api_gateway, "API запросы", "HTTPS/JSON")
Rel(admin_panel, api_gateway, "API запросы", "HTTPS/JSON")
Rel(partner_portal, api_gateway, "API запросы", "HTTPS/JSON")

' Связи API Gateway с микросервисами
Rel(api_gateway, recipe_service, "Маршрутизирует запросы", "HTTP/REST")
Rel(api_gateway, user_service, "Маршрутизирует запросы", "HTTP/REST")
Rel(api_gateway, auth_service, "Проверяет токены", "HTTP/REST")
Rel(api_gateway, analytics_service, "Отправляет события", "HTTP/REST")
Rel(api_gateway, payment_service, "Обработка платежей", "HTTP/REST")
Rel(api_gateway, ai_service, "Маршрутизирует запросы", "HTTP/REST", $tags="future")
Rel(api_gateway, meal_planning_service, "Маршрутизирует запросы", "HTTP/REST", $tags="future")
Rel(api_gateway, order_service, "Маршрутизирует запросы", "HTTP/REST", $tags="future")

' Связи микросервисов между собой
Rel(recipe_service, user_service, "Получает предпочтения пользователя", "gRPC/HTTP")
Rel(recipe_service, analytics_service, "Отправляет события", "Async/Queue")
Rel(parser_service, recipe_service, "Создает новые рецепты", "HTTP/REST")
Rel(enrichment_service, recipe_service, "Обогащает данные", "HTTP/REST")
Rel(parser_service, enrichment_service, "Передает сырые данные", "Queue/Async")
Rel(user_service, notification_service, "Триггерит уведомления", "Queue/Async")
Rel(payment_service, user_service, "Обновляет статус подписки", "HTTP/REST")

Rel(ai_service, recipe_service, "Получает данные рецептов", "HTTP/REST", $tags="future")
Rel(meal_planning_service, recipe_service, "Получает рецепты для плана", "HTTP/REST", $tags="future")
Rel(meal_planning_service, ai_service, "Получает рекомендации", "HTTP/REST", $tags="future")
Rel(order_service, meal_planning_service, "Получает список покупок", "HTTP/REST", $tags="future")

' Связи микросервисов с БД
Rel(recipe_service, recipe_db, "Читает/пишет", "PostgreSQL Protocol")
Rel(user_service, user_db, "Читает/пишет", "PostgreSQL Protocol")
Rel(auth_service, user_db, "Читает/пишет", "PostgreSQL Protocol")
Rel(analytics_service, analytics_db, "Пишет события", "ClickHouse Protocol")
Rel(payment_service, user_db, "Обновляет подписки", "PostgreSQL Protocol")

' Связи с кэшем
Rel(recipe_service, cache, "Кэширует рецепты", "Redis Protocol")
Rel(user_service, cache, "Кэширует профили", "Redis Protocol")
Rel(auth_service, cache, "Хранит сессии", "Redis Protocol")

' Связи с очередями
Rel(parser_service, message_queue, "Публикует задачи парсинга", "AMQP/Kafka")
Rel(enrichment_service, message_queue, "Подписывается на события", "AMQP/Kafka")
Rel(analytics_service, message_queue, "Подписывается на события", "AMQP/Kafka")
Rel(notification_service, message_queue, "Подписывается на события", "AMQP/Kafka")

' Связи с файловым хранилищем
Rel(recipe_service, file_storage, "Сохраняет/получает изображения", "S3 API")
Rel(user_service, file_storage, "Сохраняет аватары", "S3 API")

' Связи с внешними системами
Rel(parser_service, recipe_sources, "Парсит рецепты", "HTTP/Web Scraping")
Rel(order_service, delivery_apis, "Отправляет заказы", "REST API", $tags="future")
Rel(ai_service, llm_providers, "Получает ответы ИИ", "REST API", $tags="future")
Rel(payment_service, payment_gateways, "Обрабатывает платежи", "REST API")
Rel(notification_service, external_services, "Отправляет уведомления", "SMTP/REST API")

SHOW_LEGEND()

@enduml
