name: Auto Label

on:
  pull_request:
    types: [opened, edited, synchronize]
  issues:
    types: [opened, edited]

jobs:
  label-pr:
    name: Label Pull Requests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Auto-label based on changed files
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;

            // Get list of changed files
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });

            const labels = new Set();

            // Categorize by file paths
            files.forEach(file => {
              const path = file.filename;

              if (path.includes('docs/architecture/')) {
                labels.add('architecture');
              }
              if (path.includes('docs/requirements/')) {
                labels.add('requirements');
              }
              if (path.includes('docs/business/')) {
                labels.add('business');
              }
              if (path.includes('docs/planning/')) {
                labels.add('planning');
              }
              if (path.includes('docs/guides/')) {
                labels.add('guides');
              }
              if (path.includes('diagrams/')) {
                labels.add('diagrams');
              }
              if (path.includes('.github/')) {
                labels.add('ci/cd');
              }
              if (path === 'README.md' || path === 'ORGANIZATION.md') {
                labels.add('documentation');
              }
              if (path.endsWith('.puml')) {
                labels.add('diagrams');
              }
              if (path.endsWith('.md')) {
                labels.add('documentation');
              }
            });

            // Add priority label based on PR title
            const title = pr.title.toLowerCase();
            if (title.includes('critical') || title.includes('urgent') || title.includes('hotfix')) {
              labels.add('priority: critical');
            } else if (title.includes('mvp') || title.includes('important')) {
              labels.add('priority: high');
            }

            // Add type label based on PR title prefix
            if (title.startsWith('feat:') || title.startsWith('feature:')) {
              labels.add('type: feature');
            } else if (title.startsWith('fix:')) {
              labels.add('type: bug');
            } else if (title.startsWith('docs:')) {
              labels.add('type: documentation');
            } else if (title.startsWith('refactor:')) {
              labels.add('type: refactor');
            } else if (title.startsWith('chore:')) {
              labels.add('type: chore');
            }

            // Apply labels
            if (labels.size > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: Array.from(labels)
              });
            }

  label-issue:
    name: Label Issues
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'

    steps:
      - name: Auto-label based on issue template
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body || '';
            const title = issue.title.toLowerCase();
            const labels = [];

            // Detect issue type from template
            if (body.includes('Architecture Question') || title.includes('architecture')) {
              labels.push('architecture', 'question');
            }
            if (body.includes('Documentation Update') || title.includes('documentation')) {
              labels.push('documentation', 'enhancement');
            }
            if (body.includes('Diagram Request') || title.includes('diagram')) {
              labels.push('diagrams', 'enhancement');
            }

            // Detect priority from title
            if (title.includes('critical') || title.includes('urgent')) {
              labels.push('priority: critical');
            } else if (title.includes('important') || title.includes('mvp')) {
              labels.push('priority: high');
            }

            // Apply labels
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: labels
              });
            }
