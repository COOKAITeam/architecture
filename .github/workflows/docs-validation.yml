name: Documentation Validation

on:
  pull_request:
    branches: [main]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'ORGANIZATION.md'
      - 'CONTRIBUTING.md'
  push:
    branches: [main]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'ORGANIZATION.md'
      - 'CONTRIBUTING.md'

permissions:
  contents: read
  pull-requests: write

jobs:
  validate-markdown:
    name: Validate Markdown Files
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install markdownlint
        run: npm install -g markdownlint-cli

      - name: Run markdownlint
        run: markdownlint '**/*.md' --ignore node_modules --ignore .github --config .markdownlint.json
        continue-on-error: true

      - name: Check for broken links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          config-file: '.markdown-link-check.json'
        continue-on-error: true

  check-structure:
    name: Check Documentation Structure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify required files exist
        run: |
          echo "Checking required documentation files..."
          files=(
            "README.md"
            "ORGANIZATION.md"
            "CONTRIBUTING.md"
            "LICENSE"
            "docs/architecture/MVP_ARCHITECTURE.md"
            "docs/planning/PROJECT_BACKLOG.md"
            "docs/planning/PROJECT_SUMMARY.md"
            "docs/guides/FILE_GUIDE.md"
            "docs/guides/GIT_WORKFLOW.md"
            "docs/requirements/COOKie-requirements-v1.md"
            "docs/business/COOKie-description.md"
            "docs/business/COOKie-investor-pitch.md"
          )

          missing_files=()
          for file in "${files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            fi
          done

          if [ ${#missing_files[@]} -ne 0 ]; then
            echo "❌ Missing required files:"
            printf '%s\n' "${missing_files[@]}"
            exit 1
          else
            echo "✅ All required files present"
          fi

      - name: Verify directory structure
        run: |
          echo "Checking directory structure..."
          dirs=(
            "docs/architecture"
            "docs/requirements"
            "docs/business"
            "docs/planning"
            "docs/guides"
            "diagrams/mvp"
            "diagrams/c4"
            "diagrams/sequence"
            "diagrams/database"
            "diagrams/deployment"
            "archive"
            ".github/ISSUE_TEMPLATE"
          )

          missing_dirs=()
          for dir in "${dirs[@]}"; do
            if [ ! -d "$dir" ]; then
              missing_dirs+=("$dir")
            fi
          done

          if [ ${#missing_dirs[@]} -ne 0 ]; then
            echo "❌ Missing required directories:"
            printf '%s\n' "${missing_dirs[@]}"
            exit 1
          else
            echo "✅ All required directories present"
          fi

  validate-plantuml:
    name: Validate PlantUML Diagrams
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Graphviz (required for PlantUML component diagrams)
        run: sudo apt-get update && sudo apt-get install -y graphviz

      - name: Install PlantUML
        run: |
          wget https://github.com/plantuml/plantuml/releases/download/v1.2024.3/plantuml-1.2024.3.jar
          mv plantuml-1.2024.3.jar plantuml.jar

      - name: Validate PlantUML syntax
        run: |
          echo "Validating PlantUML diagrams..."

          # Track validation results
          all_valid=true
          failed_files=()

          # Create temp output directory
          mkdir -p /tmp/plantuml-check

          # Find and validate all .puml files
          while IFS= read -r file; do
            echo "Checking $file..."

            # Try to compile the diagram (exit code 0 = success, non-zero = error)
            # Use -failfast2 to stop on first error and return non-zero exit code
            if java -jar plantuml.jar -failfast2 "$file" -o /tmp/plantuml-check > /dev/null 2>&1; then
              echo "✅ $file is valid"
            else
              echo "❌ Syntax error in $file"
              # Show actual error
              java -jar plantuml.jar "$file" -o /tmp/plantuml-check 2>&1 | head -10
              failed_files+=("$file")
              all_valid=false
            fi
          done < <(find diagrams -name "*.puml" -type f)

          # Cleanup
          rm -rf /tmp/plantuml-check

          # Summary and exit
          if [ "$all_valid" = true ]; then
            echo ""
            echo "✅ All PlantUML diagrams validated successfully!"
            exit 0
          else
            echo ""
            echo "❌ PlantUML validation failed for the following files:"
            printf '%s\n' "${failed_files[@]}"
            exit 1
          fi

  pr-comment:
    name: Add PR Comment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [validate-markdown, check-structure, validate-plantuml]

    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ **Documentation validation passed!**\n\nAll checks completed successfully:\n- ✅ Markdown validation\n- ✅ Documentation structure\n- ✅ PlantUML diagrams\n\nThis PR is ready for review.'
            })
